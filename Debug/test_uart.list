
test_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc8  08002fc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc8  08002fc8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc8  08002fc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08003040  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003040  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007723  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000181f  00000000  00000000  000277bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f8  00000000  00000000  00028fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000620  00000000  00000000  000296d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ca15  00000000  00000000  00029cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006aba  00000000  00000000  0003670d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00046fb9  00000000  00000000  0003d1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00084180  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018dc  00000000  00000000  000841fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e90 	.word	0x08002e90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002e90 	.word	0x08002e90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <ft_create_morze_array>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int		ft_create_morze_array(char ***morze_array)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	*morze_array = (char **)malloc(sizeof(char *) * 36);
 8000238:	2090      	movs	r0, #144	; 0x90
 800023a:	f002 fd2b 	bl	8002c94 <malloc>
 800023e:	0003      	movs	r3, r0
 8000240:	001a      	movs	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]
	(*morze_array)[0] = strdup("11111");
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681c      	ldr	r4, [r3, #0]
 800024a:	4bb4      	ldr	r3, [pc, #720]	; (800051c <ft_create_morze_array+0x2ec>)
 800024c:	0018      	movs	r0, r3
 800024e:	f002 fdf7 	bl	8002e40 <strdup>
 8000252:	0003      	movs	r3, r0
 8000254:	6023      	str	r3, [r4, #0]
	(*morze_array)[1] = strdup("01111");
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	1d1c      	adds	r4, r3, #4
 800025c:	4bb0      	ldr	r3, [pc, #704]	; (8000520 <ft_create_morze_array+0x2f0>)
 800025e:	0018      	movs	r0, r3
 8000260:	f002 fdee 	bl	8002e40 <strdup>
 8000264:	0003      	movs	r3, r0
 8000266:	6023      	str	r3, [r4, #0]
	(*morze_array)[2] = strdup("00111");
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3308      	adds	r3, #8
 800026e:	001c      	movs	r4, r3
 8000270:	4bac      	ldr	r3, [pc, #688]	; (8000524 <ft_create_morze_array+0x2f4>)
 8000272:	0018      	movs	r0, r3
 8000274:	f002 fde4 	bl	8002e40 <strdup>
 8000278:	0003      	movs	r3, r0
 800027a:	6023      	str	r3, [r4, #0]
	(*morze_array)[3] = strdup("00011");
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	330c      	adds	r3, #12
 8000282:	001c      	movs	r4, r3
 8000284:	4ba8      	ldr	r3, [pc, #672]	; (8000528 <ft_create_morze_array+0x2f8>)
 8000286:	0018      	movs	r0, r3
 8000288:	f002 fdda 	bl	8002e40 <strdup>
 800028c:	0003      	movs	r3, r0
 800028e:	6023      	str	r3, [r4, #0]
	(*morze_array)[4] = strdup("00001");
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	3310      	adds	r3, #16
 8000296:	001c      	movs	r4, r3
 8000298:	4ba4      	ldr	r3, [pc, #656]	; (800052c <ft_create_morze_array+0x2fc>)
 800029a:	0018      	movs	r0, r3
 800029c:	f002 fdd0 	bl	8002e40 <strdup>
 80002a0:	0003      	movs	r3, r0
 80002a2:	6023      	str	r3, [r4, #0]
	(*morze_array)[5] = strdup("00000");
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3314      	adds	r3, #20
 80002aa:	001c      	movs	r4, r3
 80002ac:	4ba0      	ldr	r3, [pc, #640]	; (8000530 <ft_create_morze_array+0x300>)
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 fdc6 	bl	8002e40 <strdup>
 80002b4:	0003      	movs	r3, r0
 80002b6:	6023      	str	r3, [r4, #0]
	(*morze_array)[6] = strdup("10000");
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3318      	adds	r3, #24
 80002be:	001c      	movs	r4, r3
 80002c0:	4b9c      	ldr	r3, [pc, #624]	; (8000534 <ft_create_morze_array+0x304>)
 80002c2:	0018      	movs	r0, r3
 80002c4:	f002 fdbc 	bl	8002e40 <strdup>
 80002c8:	0003      	movs	r3, r0
 80002ca:	6023      	str	r3, [r4, #0]
	(*morze_array)[7] = strdup("11000");
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	331c      	adds	r3, #28
 80002d2:	001c      	movs	r4, r3
 80002d4:	4b98      	ldr	r3, [pc, #608]	; (8000538 <ft_create_morze_array+0x308>)
 80002d6:	0018      	movs	r0, r3
 80002d8:	f002 fdb2 	bl	8002e40 <strdup>
 80002dc:	0003      	movs	r3, r0
 80002de:	6023      	str	r3, [r4, #0]
	(*morze_array)[8] = strdup("11100");
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3320      	adds	r3, #32
 80002e6:	001c      	movs	r4, r3
 80002e8:	4b94      	ldr	r3, [pc, #592]	; (800053c <ft_create_morze_array+0x30c>)
 80002ea:	0018      	movs	r0, r3
 80002ec:	f002 fda8 	bl	8002e40 <strdup>
 80002f0:	0003      	movs	r3, r0
 80002f2:	6023      	str	r3, [r4, #0]
	(*morze_array)[9] = strdup("11110");
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3324      	adds	r3, #36	; 0x24
 80002fa:	001c      	movs	r4, r3
 80002fc:	4b90      	ldr	r3, [pc, #576]	; (8000540 <ft_create_morze_array+0x310>)
 80002fe:	0018      	movs	r0, r3
 8000300:	f002 fd9e 	bl	8002e40 <strdup>
 8000304:	0003      	movs	r3, r0
 8000306:	6023      	str	r3, [r4, #0]
	(*morze_array)[10] = strdup("01");//a
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3328      	adds	r3, #40	; 0x28
 800030e:	001c      	movs	r4, r3
 8000310:	4b8c      	ldr	r3, [pc, #560]	; (8000544 <ft_create_morze_array+0x314>)
 8000312:	0018      	movs	r0, r3
 8000314:	f002 fd94 	bl	8002e40 <strdup>
 8000318:	0003      	movs	r3, r0
 800031a:	6023      	str	r3, [r4, #0]
	(*morze_array)[11] = strdup("1000");//b
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	332c      	adds	r3, #44	; 0x2c
 8000322:	001c      	movs	r4, r3
 8000324:	4b88      	ldr	r3, [pc, #544]	; (8000548 <ft_create_morze_array+0x318>)
 8000326:	0018      	movs	r0, r3
 8000328:	f002 fd8a 	bl	8002e40 <strdup>
 800032c:	0003      	movs	r3, r0
 800032e:	6023      	str	r3, [r4, #0]
	(*morze_array)[12] = strdup("1010");//c
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	3330      	adds	r3, #48	; 0x30
 8000336:	001c      	movs	r4, r3
 8000338:	4b84      	ldr	r3, [pc, #528]	; (800054c <ft_create_morze_array+0x31c>)
 800033a:	0018      	movs	r0, r3
 800033c:	f002 fd80 	bl	8002e40 <strdup>
 8000340:	0003      	movs	r3, r0
 8000342:	6023      	str	r3, [r4, #0]
	(*morze_array)[13] = strdup("100");//d
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3334      	adds	r3, #52	; 0x34
 800034a:	001c      	movs	r4, r3
 800034c:	4b80      	ldr	r3, [pc, #512]	; (8000550 <ft_create_morze_array+0x320>)
 800034e:	0018      	movs	r0, r3
 8000350:	f002 fd76 	bl	8002e40 <strdup>
 8000354:	0003      	movs	r3, r0
 8000356:	6023      	str	r3, [r4, #0]
	(*morze_array)[14] = strdup("0");//e
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	3338      	adds	r3, #56	; 0x38
 800035e:	001c      	movs	r4, r3
 8000360:	4b7c      	ldr	r3, [pc, #496]	; (8000554 <ft_create_morze_array+0x324>)
 8000362:	0018      	movs	r0, r3
 8000364:	f002 fd6c 	bl	8002e40 <strdup>
 8000368:	0003      	movs	r3, r0
 800036a:	6023      	str	r3, [r4, #0]
	(*morze_array)[15] = strdup("0010");//f
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	333c      	adds	r3, #60	; 0x3c
 8000372:	001c      	movs	r4, r3
 8000374:	4b78      	ldr	r3, [pc, #480]	; (8000558 <ft_create_morze_array+0x328>)
 8000376:	0018      	movs	r0, r3
 8000378:	f002 fd62 	bl	8002e40 <strdup>
 800037c:	0003      	movs	r3, r0
 800037e:	6023      	str	r3, [r4, #0]
	(*morze_array)[16] = strdup("110");//g
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3340      	adds	r3, #64	; 0x40
 8000386:	001c      	movs	r4, r3
 8000388:	4b74      	ldr	r3, [pc, #464]	; (800055c <ft_create_morze_array+0x32c>)
 800038a:	0018      	movs	r0, r3
 800038c:	f002 fd58 	bl	8002e40 <strdup>
 8000390:	0003      	movs	r3, r0
 8000392:	6023      	str	r3, [r4, #0]
	(*morze_array)[17] = strdup("0000");//h
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3344      	adds	r3, #68	; 0x44
 800039a:	001c      	movs	r4, r3
 800039c:	4b70      	ldr	r3, [pc, #448]	; (8000560 <ft_create_morze_array+0x330>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 fd4e 	bl	8002e40 <strdup>
 80003a4:	0003      	movs	r3, r0
 80003a6:	6023      	str	r3, [r4, #0]
	(*morze_array)[18] = strdup("00");//i
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3348      	adds	r3, #72	; 0x48
 80003ae:	001c      	movs	r4, r3
 80003b0:	4b6c      	ldr	r3, [pc, #432]	; (8000564 <ft_create_morze_array+0x334>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fd44 	bl	8002e40 <strdup>
 80003b8:	0003      	movs	r3, r0
 80003ba:	6023      	str	r3, [r4, #0]
	(*morze_array)[19] = strdup("0111");//j
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	334c      	adds	r3, #76	; 0x4c
 80003c2:	001c      	movs	r4, r3
 80003c4:	4b68      	ldr	r3, [pc, #416]	; (8000568 <ft_create_morze_array+0x338>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f002 fd3a 	bl	8002e40 <strdup>
 80003cc:	0003      	movs	r3, r0
 80003ce:	6023      	str	r3, [r4, #0]
	(*morze_array)[20] = strdup("101");//k
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3350      	adds	r3, #80	; 0x50
 80003d6:	001c      	movs	r4, r3
 80003d8:	4b64      	ldr	r3, [pc, #400]	; (800056c <ft_create_morze_array+0x33c>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f002 fd30 	bl	8002e40 <strdup>
 80003e0:	0003      	movs	r3, r0
 80003e2:	6023      	str	r3, [r4, #0]
	(*morze_array)[21] = strdup("0100");//l
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3354      	adds	r3, #84	; 0x54
 80003ea:	001c      	movs	r4, r3
 80003ec:	4b60      	ldr	r3, [pc, #384]	; (8000570 <ft_create_morze_array+0x340>)
 80003ee:	0018      	movs	r0, r3
 80003f0:	f002 fd26 	bl	8002e40 <strdup>
 80003f4:	0003      	movs	r3, r0
 80003f6:	6023      	str	r3, [r4, #0]
	(*morze_array)[22] = strdup("11");//m
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3358      	adds	r3, #88	; 0x58
 80003fe:	001c      	movs	r4, r3
 8000400:	4b5c      	ldr	r3, [pc, #368]	; (8000574 <ft_create_morze_array+0x344>)
 8000402:	0018      	movs	r0, r3
 8000404:	f002 fd1c 	bl	8002e40 <strdup>
 8000408:	0003      	movs	r3, r0
 800040a:	6023      	str	r3, [r4, #0]
	(*morze_array)[23] = strdup("10");//n
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	335c      	adds	r3, #92	; 0x5c
 8000412:	001c      	movs	r4, r3
 8000414:	4b58      	ldr	r3, [pc, #352]	; (8000578 <ft_create_morze_array+0x348>)
 8000416:	0018      	movs	r0, r3
 8000418:	f002 fd12 	bl	8002e40 <strdup>
 800041c:	0003      	movs	r3, r0
 800041e:	6023      	str	r3, [r4, #0]
	(*morze_array)[24] = strdup("111");//o
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3360      	adds	r3, #96	; 0x60
 8000426:	001c      	movs	r4, r3
 8000428:	4b54      	ldr	r3, [pc, #336]	; (800057c <ft_create_morze_array+0x34c>)
 800042a:	0018      	movs	r0, r3
 800042c:	f002 fd08 	bl	8002e40 <strdup>
 8000430:	0003      	movs	r3, r0
 8000432:	6023      	str	r3, [r4, #0]
	(*morze_array)[25] = strdup("0110");//p
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	3364      	adds	r3, #100	; 0x64
 800043a:	001c      	movs	r4, r3
 800043c:	4b50      	ldr	r3, [pc, #320]	; (8000580 <ft_create_morze_array+0x350>)
 800043e:	0018      	movs	r0, r3
 8000440:	f002 fcfe 	bl	8002e40 <strdup>
 8000444:	0003      	movs	r3, r0
 8000446:	6023      	str	r3, [r4, #0]
	(*morze_array)[26] = strdup("1101");//q
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3368      	adds	r3, #104	; 0x68
 800044e:	001c      	movs	r4, r3
 8000450:	4b4c      	ldr	r3, [pc, #304]	; (8000584 <ft_create_morze_array+0x354>)
 8000452:	0018      	movs	r0, r3
 8000454:	f002 fcf4 	bl	8002e40 <strdup>
 8000458:	0003      	movs	r3, r0
 800045a:	6023      	str	r3, [r4, #0]
	(*morze_array)[27] = strdup("010");//r
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	336c      	adds	r3, #108	; 0x6c
 8000462:	001c      	movs	r4, r3
 8000464:	4b48      	ldr	r3, [pc, #288]	; (8000588 <ft_create_morze_array+0x358>)
 8000466:	0018      	movs	r0, r3
 8000468:	f002 fcea 	bl	8002e40 <strdup>
 800046c:	0003      	movs	r3, r0
 800046e:	6023      	str	r3, [r4, #0]
	(*morze_array)[28] = strdup("000");//s
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3370      	adds	r3, #112	; 0x70
 8000476:	001c      	movs	r4, r3
 8000478:	4b44      	ldr	r3, [pc, #272]	; (800058c <ft_create_morze_array+0x35c>)
 800047a:	0018      	movs	r0, r3
 800047c:	f002 fce0 	bl	8002e40 <strdup>
 8000480:	0003      	movs	r3, r0
 8000482:	6023      	str	r3, [r4, #0]
	(*morze_array)[29] = strdup("1");//t
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	3374      	adds	r3, #116	; 0x74
 800048a:	001c      	movs	r4, r3
 800048c:	4b40      	ldr	r3, [pc, #256]	; (8000590 <ft_create_morze_array+0x360>)
 800048e:	0018      	movs	r0, r3
 8000490:	f002 fcd6 	bl	8002e40 <strdup>
 8000494:	0003      	movs	r3, r0
 8000496:	6023      	str	r3, [r4, #0]
	(*morze_array)[30] = strdup("001");//u
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3378      	adds	r3, #120	; 0x78
 800049e:	001c      	movs	r4, r3
 80004a0:	4b3c      	ldr	r3, [pc, #240]	; (8000594 <ft_create_morze_array+0x364>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 fccc 	bl	8002e40 <strdup>
 80004a8:	0003      	movs	r3, r0
 80004aa:	6023      	str	r3, [r4, #0]
	(*morze_array)[31] = strdup("0001");//v
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	337c      	adds	r3, #124	; 0x7c
 80004b2:	001c      	movs	r4, r3
 80004b4:	4b38      	ldr	r3, [pc, #224]	; (8000598 <ft_create_morze_array+0x368>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f002 fcc2 	bl	8002e40 <strdup>
 80004bc:	0003      	movs	r3, r0
 80004be:	6023      	str	r3, [r4, #0]
	(*morze_array)[32] = strdup("011");//w
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3380      	adds	r3, #128	; 0x80
 80004c6:	001c      	movs	r4, r3
 80004c8:	4b34      	ldr	r3, [pc, #208]	; (800059c <ft_create_morze_array+0x36c>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fcb8 	bl	8002e40 <strdup>
 80004d0:	0003      	movs	r3, r0
 80004d2:	6023      	str	r3, [r4, #0]
	(*morze_array)[33] = strdup("1001");//x
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3384      	adds	r3, #132	; 0x84
 80004da:	001c      	movs	r4, r3
 80004dc:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <ft_create_morze_array+0x370>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f002 fcae 	bl	8002e40 <strdup>
 80004e4:	0003      	movs	r3, r0
 80004e6:	6023      	str	r3, [r4, #0]
	(*morze_array)[34] = strdup("1011");//y
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3388      	adds	r3, #136	; 0x88
 80004ee:	001c      	movs	r4, r3
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <ft_create_morze_array+0x374>)
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fca4 	bl	8002e40 <strdup>
 80004f8:	0003      	movs	r3, r0
 80004fa:	6023      	str	r3, [r4, #0]
	(*morze_array)[35] = strdup("1100");//z
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	338c      	adds	r3, #140	; 0x8c
 8000502:	001c      	movs	r4, r3
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <ft_create_morze_array+0x378>)
 8000506:	0018      	movs	r0, r3
 8000508:	f002 fc9a 	bl	8002e40 <strdup>
 800050c:	0003      	movs	r3, r0
 800050e:	6023      	str	r3, [r4, #0]
	return (0);
 8000510:	2300      	movs	r3, #0
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b003      	add	sp, #12
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	08002ea8 	.word	0x08002ea8
 8000520:	08002eb0 	.word	0x08002eb0
 8000524:	08002eb8 	.word	0x08002eb8
 8000528:	08002ec0 	.word	0x08002ec0
 800052c:	08002ec8 	.word	0x08002ec8
 8000530:	08002ed0 	.word	0x08002ed0
 8000534:	08002ed8 	.word	0x08002ed8
 8000538:	08002ee0 	.word	0x08002ee0
 800053c:	08002ee8 	.word	0x08002ee8
 8000540:	08002ef0 	.word	0x08002ef0
 8000544:	08002ef8 	.word	0x08002ef8
 8000548:	08002efc 	.word	0x08002efc
 800054c:	08002f04 	.word	0x08002f04
 8000550:	08002f0c 	.word	0x08002f0c
 8000554:	08002f10 	.word	0x08002f10
 8000558:	08002f14 	.word	0x08002f14
 800055c:	08002f1c 	.word	0x08002f1c
 8000560:	08002f20 	.word	0x08002f20
 8000564:	08002f28 	.word	0x08002f28
 8000568:	08002f2c 	.word	0x08002f2c
 800056c:	08002f34 	.word	0x08002f34
 8000570:	08002f38 	.word	0x08002f38
 8000574:	08002f40 	.word	0x08002f40
 8000578:	08002f44 	.word	0x08002f44
 800057c:	08002f48 	.word	0x08002f48
 8000580:	08002f4c 	.word	0x08002f4c
 8000584:	08002f54 	.word	0x08002f54
 8000588:	08002f5c 	.word	0x08002f5c
 800058c:	08002f60 	.word	0x08002f60
 8000590:	08002f64 	.word	0x08002f64
 8000594:	08002f68 	.word	0x08002f68
 8000598:	08002f6c 	.word	0x08002f6c
 800059c:	08002f74 	.word	0x08002f74
 80005a0:	08002f78 	.word	0x08002f78
 80005a4:	08002f80 	.word	0x08002f80
 80005a8:	08002f88 	.word	0x08002f88

080005ac <ft_strdel>:

void	ft_strdel(char **str)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	free (*str);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 fb75 	bl	8002ca8 <free>
	*str = NULL;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b002      	add	sp, #8
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft_strjoin>:

char	*ft_strjoin(char *str1, uint8_t *str12)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	int i;
	int len;
	char *tmp;

	if (!str1)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <ft_strjoin+0x14>
		return (0);
 80005dc:	2300      	movs	r3, #0
 80005de:	e02f      	b.n	8000640 <ft_strjoin+0x74>
	len = strlen(str1) + 2;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff fd90 	bl	8000108 <strlen>
 80005e8:	0003      	movs	r3, r0
 80005ea:	3302      	adds	r3, #2
 80005ec:	613b      	str	r3, [r7, #16]
	tmp = (char *)malloc(sizeof(char) * len);
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 fb4f 	bl	8002c94 <malloc>
 80005f6:	0003      	movs	r3, r0
 80005f8:	60fb      	str	r3, [r7, #12]
	i = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
	while (i < strlen(str1))
 80005fe:	e00a      	b.n	8000616 <ft_strjoin+0x4a>
	{
		tmp[i] = str1[i];
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	18d2      	adds	r2, r2, r3
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	68f9      	ldr	r1, [r7, #12]
 800060a:	18cb      	adds	r3, r1, r3
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	701a      	strb	r2, [r3, #0]
		i++;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3301      	adds	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
	while (i < strlen(str1))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	0018      	movs	r0, r3
 800061a:	f7ff fd75 	bl	8000108 <strlen>
 800061e:	0002      	movs	r2, r0
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	429a      	cmp	r2, r3
 8000624:	d8ec      	bhi.n	8000600 <ft_strjoin+0x34>
	}
	tmp[i] = (char)(str12[0]);
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	18d3      	adds	r3, r2, r3
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	701a      	strb	r2, [r3, #0]
	tmp[i + 1] = '\0';
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	18d3      	adds	r3, r2, r3
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
//		tmp[i] = str2[j];
//		i++;
//		j++;
//	}
//	tmp[i] = '\0';
	return (tmp);
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b006      	add	sp, #24
 8000646:	bd80      	pop	{r7, pc}

08000648 <ft_pause_1>:

int		ft_pause_1(uint32_t point)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <ft_pause_1+0x28>)
 8000652:	2200      	movs	r2, #0
 8000654:	2108      	movs	r1, #8
 8000656:	0018      	movs	r0, r3
 8000658:	f000 feb0 	bl	80013bc <HAL_GPIO_WritePin>
	HAL_Delay(point);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fbfe 	bl	8000e60 <HAL_Delay>
	return (0);
 8000664:	2300      	movs	r3, #0
}
 8000666:	0018      	movs	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	48000400 	.word	0x48000400

08000674 <ft_pause_3>:

int		ft_pause_3(uint32_t point)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <ft_pause_3+0x2c>)
 800067e:	2200      	movs	r2, #0
 8000680:	2108      	movs	r1, #8
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fe9a 	bl	80013bc <HAL_GPIO_WritePin>
	HAL_Delay(3 * point);
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	0013      	movs	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	189b      	adds	r3, r3, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fbe5 	bl	8000e60 <HAL_Delay>
	return (0);
 8000696:	2300      	movs	r3, #0
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	b002      	add	sp, #8
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	48000400 	.word	0x48000400

080006a4 <ft_small_signal>:

int		ft_small_signal(uint32_t point)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <ft_small_signal+0x34>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	2108      	movs	r1, #8
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fe82 	bl	80013bc <HAL_GPIO_WritePin>
	HAL_Delay(point);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fbd0 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ft_small_signal+0x34>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	2108      	movs	r1, #8
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fe78 	bl	80013bc <HAL_GPIO_WritePin>
	return (0);
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	0018      	movs	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	48000400 	.word	0x48000400

080006dc <ft_big_signal>:

int		ft_big_signal(uint32_t point)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <ft_big_signal+0x38>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	2108      	movs	r1, #8
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fe66 	bl	80013bc <HAL_GPIO_WritePin>
	HAL_Delay(3 * point);
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	0013      	movs	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	189b      	adds	r3, r3, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fbb1 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <ft_big_signal+0x38>)
 8000700:	2200      	movs	r2, #0
 8000702:	2108      	movs	r1, #8
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fe59 	bl	80013bc <HAL_GPIO_WritePin>
	return (0);
 800070a:	2300      	movs	r3, #0
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	b002      	add	sp, #8
 8000712:	bd80      	pop	{r7, pc}
 8000714:	48000400 	.word	0x48000400

08000718 <ft_light_letter>:

int		ft_light_letter(char c, char **morze_array, uint32_t point)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	210f      	movs	r1, #15
 8000724:	187b      	adds	r3, r7, r1
 8000726:	1c02      	adds	r2, r0, #0
 8000728:	701a      	strb	r2, [r3, #0]
	int num;
	int i;

	if (c >= '0' && c <= '9')
 800072a:	187b      	adds	r3, r7, r1
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b2f      	cmp	r3, #47	; 0x2f
 8000730:	d90a      	bls.n	8000748 <ft_light_letter+0x30>
 8000732:	230f      	movs	r3, #15
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b39      	cmp	r3, #57	; 0x39
 800073a:	d805      	bhi.n	8000748 <ft_light_letter+0x30>
	{
		num = c - '0';
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3b30      	subs	r3, #48	; 0x30
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	e021      	b.n	800078c <ft_light_letter+0x74>
	}
	else if (c >= 'a' && c <= 'z')
 8000748:	230f      	movs	r3, #15
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b60      	cmp	r3, #96	; 0x60
 8000750:	d90a      	bls.n	8000768 <ft_light_letter+0x50>
 8000752:	230f      	movs	r3, #15
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b7a      	cmp	r3, #122	; 0x7a
 800075a:	d805      	bhi.n	8000768 <ft_light_letter+0x50>
	{
		num = 10 + c - 'a';
 800075c:	230f      	movs	r3, #15
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3b57      	subs	r3, #87	; 0x57
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	e011      	b.n	800078c <ft_light_letter+0x74>
	}
	else if (c >= 'A' && c <= 'Z')
 8000768:	230f      	movs	r3, #15
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b40      	cmp	r3, #64	; 0x40
 8000770:	d90a      	bls.n	8000788 <ft_light_letter+0x70>
 8000772:	230f      	movs	r3, #15
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b5a      	cmp	r3, #90	; 0x5a
 800077a:	d805      	bhi.n	8000788 <ft_light_letter+0x70>
	{
		num = 10 + c - 'A';
 800077c:	230f      	movs	r3, #15
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	3b37      	subs	r3, #55	; 0x37
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	e001      	b.n	800078c <ft_light_letter+0x74>
	}
	else
	{
		return (0);
 8000788:	2300      	movs	r3, #0
 800078a:	e03f      	b.n	800080c <ft_light_letter+0xf4>
	}
	i = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
	while (morze_array[num][i] != '\0')
 8000790:	e031      	b.n	80007f6 <ft_light_letter+0xde>
	{
		if (morze_array[num][i] == '0')
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b30      	cmp	r3, #48	; 0x30
 80007a4:	d104      	bne.n	80007b0 <ft_light_letter+0x98>
			ft_small_signal(point);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff ff7b 	bl	80006a4 <ft_small_signal>
 80007ae:	e003      	b.n	80007b8 <ft_light_letter+0xa0>
		else
			ft_big_signal(point);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff92 	bl	80006dc <ft_big_signal>
		i++;
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	3301      	adds	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
		if (morze_array[num][i] != '\0')
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	18d3      	adds	r3, r2, r3
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d003      	beq.n	80007da <ft_light_letter+0xc2>
			ft_pause_1(point);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff ff37 	bl	8000648 <ft_pause_1>
		if (morze_array[num][i] == '\0')
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	18d3      	adds	r3, r2, r3
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	18d3      	adds	r3, r2, r3
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d103      	bne.n	80007f6 <ft_light_letter+0xde>
			ft_pause_3(point);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ff3f 	bl	8000674 <ft_pause_3>
	while (morze_array[num][i] != '\0')
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	18d3      	adds	r3, r2, r3
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	18d3      	adds	r3, r2, r3
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1c3      	bne.n	8000792 <ft_light_letter+0x7a>
	}
	return (0);
 800080a:	2300      	movs	r3, #0
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	b006      	add	sp, #24
 8000812:	bd80      	pop	{r7, pc}

08000814 <ft_delete_first>:

int		ft_delete_first(char **str)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	int i;
	int len;
	char *tmp;

	len = strlen(*str);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff fc71 	bl	8000108 <strlen>
 8000826:	0003      	movs	r3, r0
 8000828:	613b      	str	r3, [r7, #16]
	if (len == 1)
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d105      	bne.n	800083c <ft_delete_first+0x28>
	{
		ft_strdel(str);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff feba 	bl	80005ac <ft_strdel>
		return (0);
 8000838:	2300      	movs	r3, #0
 800083a:	e031      	b.n	80008a0 <ft_delete_first+0x8c>
	}
	else
	{
		i = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
		tmp = (char *)malloc(sizeof(char) * len);
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fa26 	bl	8002c94 <malloc>
 8000848:	0003      	movs	r3, r0
 800084a:	60fb      	str	r3, [r7, #12]
		while (i < len)
 800084c:	e00c      	b.n	8000868 <ft_delete_first+0x54>
		{
			tmp[i - 1] = (*str)[i];
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	18d2      	adds	r2, r2, r3
 8000856:	68f9      	ldr	r1, [r7, #12]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3b01      	subs	r3, #1
 800085c:	18cb      	adds	r3, r1, r3
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	701a      	strb	r2, [r3, #0]
			i++;
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
		while (i < len)
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	429a      	cmp	r2, r3
 800086e:	dbee      	blt.n	800084e <ft_delete_first+0x3a>
		}
		tmp[i - 1] = '\0';
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3b01      	subs	r3, #1
 8000876:	18d3      	adds	r3, r2, r3
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
		ft_strdel(str);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fe94 	bl	80005ac <ft_strdel>
		*str = strdup(tmp);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fada 	bl	8002e40 <strdup>
 800088c:	0003      	movs	r3, r0
 800088e:	001a      	movs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	601a      	str	r2, [r3, #0]
		ft_strdel(&tmp);
 8000894:	230c      	movs	r3, #12
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff fe87 	bl	80005ac <ft_strdel>
	}
	return (0);
 800089e:	2300      	movs	r3, #0
}
 80008a0:	0018      	movs	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b006      	add	sp, #24
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 fa73 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f83b 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 f8c1 	bl	8000a3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008ba:	f000 f88f 	bl	80009dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char **morze_array = NULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
  int point = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  data = (t_data *)malloc(sizeof(t_data));
 80008c6:	2008      	movs	r0, #8
 80008c8:	f002 f9e4 	bl	8002c94 <malloc>
 80008cc:	0003      	movs	r3, r0
 80008ce:	001a      	movs	r2, r3
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <main+0x7c>)
 80008d2:	601a      	str	r2, [r3, #0]
  data->str = NULL;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <main+0x7c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  point = 400;
 80008dc:	23c8      	movs	r3, #200	; 0xc8
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	607b      	str	r3, [r7, #4]
  ft_create_morze_array(&morze_array);
 80008e2:	003b      	movs	r3, r7
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff fca3 	bl	8000230 <ft_create_morze_array>
  HAL_UART_Receive_IT(&huart1, data->str12, 1);
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <main+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	0019      	movs	r1, r3
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <main+0x80>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fbb7 	bl	8002068 <HAL_UART_Receive_IT>

  while (1)
  {
	  if (data->str)
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <main+0x7c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0fa      	beq.n	80008fa <main+0x52>
	  {
		  ft_light_letter((data->str)[0], morze_array, point);
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <main+0x7c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	6839      	ldr	r1, [r7, #0]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ff01 	bl	8000718 <ft_light_letter>
		  ft_delete_first(&(data->str));
 8000916:	4b03      	ldr	r3, [pc, #12]	; (8000924 <main+0x7c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3304      	adds	r3, #4
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff ff79 	bl	8000814 <ft_delete_first>
	  if (data->str)
 8000922:	e7ea      	b.n	80008fa <main+0x52>
 8000924:	20000118 	.word	0x20000118
 8000928:	20000098 	.word	0x20000098

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b095      	sub	sp, #84	; 0x54
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	2420      	movs	r4, #32
 8000934:	193b      	adds	r3, r7, r4
 8000936:	0018      	movs	r0, r3
 8000938:	2330      	movs	r3, #48	; 0x30
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f002 f9bd 	bl	8002cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000942:	2310      	movs	r3, #16
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	0018      	movs	r0, r3
 8000948:	2310      	movs	r3, #16
 800094a:	001a      	movs	r2, r3
 800094c:	2100      	movs	r1, #0
 800094e:	f002 f9b5 	bl	8002cbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000952:	003b      	movs	r3, r7
 8000954:	0018      	movs	r0, r3
 8000956:	2310      	movs	r3, #16
 8000958:	001a      	movs	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	f002 f9ae 	bl	8002cbc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000960:	0021      	movs	r1, r4
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2202      	movs	r2, #2
 8000966:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2201      	movs	r2, #1
 800096c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2210      	movs	r2, #16
 8000972:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	187b      	adds	r3, r7, r1
 800097c:	0018      	movs	r0, r3
 800097e:	f000 fd3b 	bl	80013f8 <HAL_RCC_OscConfig>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000986:	f000 f905 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	2110      	movs	r1, #16
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2207      	movs	r2, #7
 8000990:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2100      	movs	r1, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f001 f841 	bl	8001a30 <HAL_RCC_ClockConfig>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009b2:	f000 f8ef 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009b6:	003b      	movs	r3, r7
 80009b8:	2201      	movs	r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009bc:	003b      	movs	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c2:	003b      	movs	r3, r7
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 f985 	bl	8001cd4 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009ce:	f000 f8e1 	bl	8000b94 <Error_Handler>
  }
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b015      	add	sp, #84	; 0x54
 80009d8:	bd90      	pop	{r4, r7, pc}
	...

080009dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_USART1_UART_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009e8:	2296      	movs	r2, #150	; 0x96
 80009ea:	0192      	lsls	r2, r2, #6
 80009ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <MX_USART1_UART_Init+0x58>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 fa25 	bl	8001e70 <HAL_UART_Init>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 f8b3 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000098 	.word	0x20000098
 8000a38:	40013800 	.word	0x40013800

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	240c      	movs	r4, #12
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	2314      	movs	r3, #20
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f002 f935 	bl	8002cbc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0xa4>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_GPIO_Init+0xa4>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	03c9      	lsls	r1, r1, #15
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_GPIO_Init+0xa4>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	03db      	lsls	r3, r3, #15
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_GPIO_Init+0xa4>)
 8000a70:	695a      	ldr	r2, [r3, #20]
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_GPIO_Init+0xa4>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	0289      	lsls	r1, r1, #10
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_GPIO_Init+0xa4>)
 8000a7e:	695a      	ldr	r2, [r3, #20]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	029b      	lsls	r3, r3, #10
 8000a84:	4013      	ands	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_GPIO_Init+0xa4>)
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_GPIO_Init+0xa4>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	02c9      	lsls	r1, r1, #11
 8000a94:	430a      	orrs	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_GPIO_Init+0xa4>)
 8000a9a:	695a      	ldr	r2, [r3, #20]
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	02db      	lsls	r3, r3, #11
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_GPIO_Init+0xa8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2108      	movs	r1, #8
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fc85 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab2:	0021      	movs	r1, r4
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <MX_GPIO_Init+0xa8>)
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	f000 fb0a 	bl	80010ec <HAL_GPIO_Init>

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b009      	add	sp, #36	; 0x24
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	48000400 	.word	0x48000400

08000ae8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	char *tmp;

	HAL_UART_Transmit(&huart1, data->str12, 1, 0xFFFF);
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	0019      	movs	r1, r3
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <HAL_UART_RxCpltCallback+0xa4>)
 8000af8:	4825      	ldr	r0, [pc, #148]	; (8000b90 <HAL_UART_RxCpltCallback+0xa8>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	f001 fa0c 	bl	8001f18 <HAL_UART_Transmit>
	if (data->str)
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01e      	beq.n	8000b48 <HAL_UART_RxCpltCallback+0x60>
	{
		tmp = ft_strjoin(data->str, data->str12);
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	0019      	movs	r1, r3
 8000b16:	0010      	movs	r0, r2
 8000b18:	f7ff fd58 	bl	80005cc <ft_strjoin>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	60fb      	str	r3, [r7, #12]
		ft_strdel(&(data->str));
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3304      	adds	r3, #4
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fd40 	bl	80005ac <ft_strdel>
		data->str = strdup(tmp);
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b30:	681c      	ldr	r4, [r3, #0]
 8000b32:	0010      	movs	r0, r2
 8000b34:	f002 f984 	bl	8002e40 <strdup>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	6063      	str	r3, [r4, #4]
		ft_strdel(&tmp);
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fd33 	bl	80005ac <ft_strdel>
 8000b46:	e013      	b.n	8000b70 <HAL_UART_RxCpltCallback+0x88>
	}
	else
	{
		data->str = (char *)malloc(sizeof(char)*2);
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b4a:	681c      	ldr	r4, [r3, #0]
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f002 f8a1 	bl	8002c94 <malloc>
 8000b52:	0003      	movs	r3, r0
 8000b54:	6063      	str	r3, [r4, #4]
		(data->str)[0] = (char)(data->str12)[0];
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	701a      	strb	r2, [r3, #0]
		(data->str)[1] = '\0';
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
		//data->str = strdup((char *)(data->str12));
	}
	HAL_UART_Receive_IT(&huart1, data->str12, 1);
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_UART_RxCpltCallback+0xa0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	0019      	movs	r1, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_UART_RxCpltCallback+0xa8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fa74 	bl	8002068 <HAL_UART_Receive_IT>
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b005      	add	sp, #20
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	20000118 	.word	0x20000118
 8000b8c:	0000ffff 	.word	0x0000ffff
 8000b90:	20000098 	.word	0x20000098

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	699a      	ldr	r2, [r3, #24]
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_MspInit+0x44>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	619a      	str	r2, [r3, #24]
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	69da      	ldr	r2, [r3, #28]
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	0549      	lsls	r1, r1, #21
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	61da      	str	r2, [r3, #28]
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_MspInit+0x44>)
 8000bce:	69da      	ldr	r2, [r3, #28]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	055b      	lsls	r3, r3, #21
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	40021000 	.word	0x40021000

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	2314      	movs	r3, #20
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	2314      	movs	r3, #20
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f002 f85e 	bl	8002cbc <memset>
  if(huart->Instance==USART1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <HAL_UART_MspInit+0xa0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d13a      	bne.n	8000c80 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c0c:	699a      	ldr	r2, [r3, #24]
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	01c9      	lsls	r1, r1, #7
 8000c14:	430a      	orrs	r2, r1
 8000c16:	619a      	str	r2, [r3, #24]
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c1a:	699a      	ldr	r2, [r3, #24]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	01db      	lsls	r3, r3, #7
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	0289      	lsls	r1, r1, #10
 8000c30:	430a      	orrs	r2, r1
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	029b      	lsls	r3, r3, #10
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000c42:	2114      	movs	r1, #20
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <HAL_UART_MspInit+0xa8>)
 8000c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2201      	movs	r2, #1
 8000c60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	187a      	adds	r2, r7, r1
 8000c64:	2390      	movs	r3, #144	; 0x90
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fa3e 	bl	80010ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	201b      	movs	r0, #27
 8000c76:	f000 f9c1 	bl	8000ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c7a:	201b      	movs	r0, #27
 8000c7c:	f000 f9d3 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b00a      	add	sp, #40	; 0x28
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	00008004 	.word	0x00008004

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f8b4 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <USART1_IRQHandler+0x14>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f001 fa6e 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000098 	.word	0x20000098

08000ce0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x50>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x16>
		heap_end = &end;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <_sbrk+0x50>)
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <_sbrk+0x54>)
 8000cf4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <_sbrk+0x50>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <_sbrk+0x50>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	466a      	mov	r2, sp
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d907      	bls.n	8000d1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d0a:	f001 ff99 	bl	8002c40 <__errno>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	220c      	movs	r2, #12
 8000d12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	425b      	negs	r3, r3
 8000d18:	e006      	b.n	8000d28 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <_sbrk+0x50>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	18d2      	adds	r2, r2, r3
 8000d22:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <_sbrk+0x50>)
 8000d24:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000008c 	.word	0x2000008c
 8000d34:	20000128 	.word	0x20000128

08000d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d6e:	f7ff ffe3 	bl	8000d38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d72:	f001 ff6b 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff fd97 	bl	80008a8 <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   r0, =_estack
 8000d7c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d88:	08002fd0 	.word	0x08002fd0
  ldr r2, =_sbss
 8000d8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d90:	20000124 	.word	0x20000124

08000d94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_IRQHandler>
	...

08000d98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_Init+0x24>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_Init+0x24>)
 8000da2:	2110      	movs	r1, #16
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f000 f809 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dae:	f7ff fef7 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_InitTick+0x5c>)
 8000dca:	681c      	ldr	r4, [r3, #0]
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_InitTick+0x60>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	23fa      	movs	r3, #250	; 0xfa
 8000dd4:	0098      	lsls	r0, r3, #2
 8000dd6:	f7ff f99f 	bl	8000118 <__udivsi3>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	0019      	movs	r1, r3
 8000dde:	0020      	movs	r0, r4
 8000de0:	f7ff f99a 	bl	8000118 <__udivsi3>
 8000de4:	0003      	movs	r3, r0
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 f92d 	bl	8001046 <HAL_SYSTICK_Config>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e00f      	b.n	8000e14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d80b      	bhi.n	8000e12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	425b      	negs	r3, r3
 8000e00:	2200      	movs	r2, #0
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 f8fa 	bl	8000ffc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_InitTick+0x64>)
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b003      	add	sp, #12
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	001a      	movs	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x20>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	18d2      	adds	r2, r2, r3
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_IncTick+0x20>)
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	20000008 	.word	0x20000008
 8000e48:	2000011c 	.word	0x2000011c

08000e4c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <HAL_GetTick+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	0018      	movs	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	2000011c 	.word	0x2000011c

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff0 	bl	8000e4c <HAL_GetTick>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3301      	adds	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_Delay+0x40>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	001a      	movs	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	189b      	adds	r3, r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	f7ff ffe0 	bl	8000e4c <HAL_GetTick>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b004      	add	sp, #16
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	0002      	movs	r2, r0
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb6:	d809      	bhi.n	8000ecc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	231f      	movs	r3, #31
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_EnableIRQ+0x30>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4091      	lsls	r1, r2
 8000ec8:	000a      	movs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
  }
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	0002      	movs	r2, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b7f      	cmp	r3, #127	; 0x7f
 8000eec:	d828      	bhi.n	8000f40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eee:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <__NVIC_SetPriority+0xd4>)
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	33c0      	adds	r3, #192	; 0xc0
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	589b      	ldr	r3, [r3, r2]
 8000efe:	1dfa      	adds	r2, r7, #7
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	0011      	movs	r1, r2
 8000f04:	2203      	movs	r2, #3
 8000f06:	400a      	ands	r2, r1
 8000f08:	00d2      	lsls	r2, r2, #3
 8000f0a:	21ff      	movs	r1, #255	; 0xff
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	000a      	movs	r2, r1
 8000f10:	43d2      	mvns	r2, r2
 8000f12:	401a      	ands	r2, r3
 8000f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	019b      	lsls	r3, r3, #6
 8000f1a:	22ff      	movs	r2, #255	; 0xff
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	0018      	movs	r0, r3
 8000f24:	2303      	movs	r3, #3
 8000f26:	4003      	ands	r3, r0
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <__NVIC_SetPriority+0xd4>)
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	430a      	orrs	r2, r1
 8000f38:	33c0      	adds	r3, #192	; 0xc0
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f3e:	e031      	b.n	8000fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <__NVIC_SetPriority+0xd8>)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0019      	movs	r1, r3
 8000f48:	230f      	movs	r3, #15
 8000f4a:	400b      	ands	r3, r1
 8000f4c:	3b08      	subs	r3, #8
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3306      	adds	r3, #6
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	18d3      	adds	r3, r2, r3
 8000f56:	3304      	adds	r3, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	0011      	movs	r1, r2
 8000f60:	2203      	movs	r2, #3
 8000f62:	400a      	ands	r2, r1
 8000f64:	00d2      	lsls	r2, r2, #3
 8000f66:	21ff      	movs	r1, #255	; 0xff
 8000f68:	4091      	lsls	r1, r2
 8000f6a:	000a      	movs	r2, r1
 8000f6c:	43d2      	mvns	r2, r2
 8000f6e:	401a      	ands	r2, r3
 8000f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	22ff      	movs	r2, #255	; 0xff
 8000f78:	401a      	ands	r2, r3
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	2303      	movs	r3, #3
 8000f82:	4003      	ands	r3, r0
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <__NVIC_SetPriority+0xd8>)
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	001c      	movs	r4, r3
 8000f90:	230f      	movs	r3, #15
 8000f92:	4023      	ands	r3, r4
 8000f94:	3b08      	subs	r3, #8
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	3306      	adds	r3, #6
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	18c3      	adds	r3, r0, r3
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b003      	add	sp, #12
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <SysTick_Config+0x40>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d901      	bls.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e010      	b.n	8000fec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <SysTick_Config+0x44>)
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	3a01      	subs	r2, #1
 8000fd0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	2103      	movs	r1, #3
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff ff7d 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SysTick_Config+0x44>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x44>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	00ffffff 	.word	0x00ffffff
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	210f      	movs	r1, #15
 8001008:	187b      	adds	r3, r7, r1
 800100a:	1c02      	adds	r2, r0, #0
 800100c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	187b      	adds	r3, r7, r1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b25b      	sxtb	r3, r3
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	0002      	movs	r2, r0
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b25b      	sxtb	r3, r3
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff ff33 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff ffaf 	bl	8000fb4 <SysTick_Config>
 8001056:	0003      	movs	r3, r0
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	b002      	add	sp, #8
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2221      	movs	r2, #33	; 0x21
 8001074:	5c9b      	ldrb	r3, [r3, r2]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d007      	beq.n	800108c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2204      	movs	r2, #4
 8001080:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001082:	230f      	movs	r3, #15
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	e028      	b.n	80010de <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	210e      	movs	r1, #14
 8001098:	438a      	bics	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2101      	movs	r1, #1
 80010a8:	438a      	bics	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b4:	2101      	movs	r1, #1
 80010b6:	4091      	lsls	r1, r2
 80010b8:	000a      	movs	r2, r1
 80010ba:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2221      	movs	r2, #33	; 0x21
 80010c0:	2101      	movs	r1, #1
 80010c2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2220      	movs	r2, #32
 80010c8:	2100      	movs	r1, #0
 80010ca:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	0010      	movs	r0, r2
 80010dc:	4798      	blx	r3
    } 
  }
  return status;
 80010de:	230f      	movs	r3, #15
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b004      	add	sp, #16
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	e149      	b.n	8001390 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4091      	lsls	r1, r2
 8001106:	000a      	movs	r2, r1
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d100      	bne.n	8001114 <HAL_GPIO_Init+0x28>
 8001112:	e13a      	b.n	800138a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x38>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	58d3      	ldr	r3, [r2, r3]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2207      	movs	r2, #7
 8001136:	4013      	ands	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	409a      	lsls	r2, r3
 800113e:	0013      	movs	r3, r2
 8001140:	43da      	mvns	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2107      	movs	r1, #7
 8001150:	400b      	ands	r3, r1
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	409a      	lsls	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	409a      	lsls	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d00b      	beq.n	80011c0 <HAL_GPIO_Init+0xd4>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d007      	beq.n	80011c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b4:	2b11      	cmp	r3, #17
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b12      	cmp	r3, #18
 80011be:	d130      	bne.n	8001222 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	409a      	lsls	r2, r3
 80011ce:	0013      	movs	r3, r2
 80011d0:	43da      	mvns	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f6:	2201      	movs	r2, #1
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	2201      	movs	r2, #1
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	43da      	mvns	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	055b      	lsls	r3, r3, #21
 800125a:	4013      	ands	r3, r2
 800125c:	d100      	bne.n	8001260 <HAL_GPIO_Init+0x174>
 800125e:	e094      	b.n	800138a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001260:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <HAL_GPIO_Init+0x2bc>)
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <HAL_GPIO_Init+0x2bc>)
 8001266:	2101      	movs	r1, #1
 8001268:	430a      	orrs	r2, r1
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	4b4e      	ldr	r3, [pc, #312]	; (80013a8 <HAL_GPIO_Init+0x2bc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_GPIO_Init+0x2c0>)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	589b      	ldr	r3, [r3, r2]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2203      	movs	r2, #3
 800128a:	4013      	ands	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	409a      	lsls	r2, r3
 8001292:	0013      	movs	r3, r2
 8001294:	43da      	mvns	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	2390      	movs	r3, #144	; 0x90
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x1d6>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a41      	ldr	r2, [pc, #260]	; (80013b0 <HAL_GPIO_Init+0x2c4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x1d2>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <HAL_GPIO_Init+0x2c8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x1ce>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e004      	b.n	80012c4 <HAL_GPIO_Init+0x1d8>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e002      	b.n	80012c4 <HAL_GPIO_Init+0x1d8>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_GPIO_Init+0x1d8>
 80012c2:	2300      	movs	r3, #0
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	2103      	movs	r1, #3
 80012c8:	400a      	ands	r2, r1
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	4093      	lsls	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012d4:	4935      	ldr	r1, [pc, #212]	; (80013ac <HAL_GPIO_Init+0x2c0>)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e2:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <HAL_GPIO_Init+0x2cc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	025b      	lsls	r3, r3, #9
 80012fa:	4013      	ands	r3, r2
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <HAL_GPIO_Init+0x2cc>)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <HAL_GPIO_Init+0x2cc>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43da      	mvns	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	029b      	lsls	r3, r3, #10
 8001324:	4013      	ands	r3, r2
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_GPIO_Init+0x2cc>)
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_GPIO_Init+0x2cc>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43da      	mvns	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	035b      	lsls	r3, r3, #13
 800134e:	4013      	ands	r3, r2
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_GPIO_Init+0x2cc>)
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_GPIO_Init+0x2cc>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43da      	mvns	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	039b      	lsls	r3, r3, #14
 8001378:	4013      	ands	r3, r2
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_GPIO_Init+0x2cc>)
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	40da      	lsrs	r2, r3
 8001398:	1e13      	subs	r3, r2, #0
 800139a:	d000      	beq.n	800139e <HAL_GPIO_Init+0x2b2>
 800139c:	e6ae      	b.n	80010fc <HAL_GPIO_Init+0x10>
  } 
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b006      	add	sp, #24
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000
 80013b0:	48000400 	.word	0x48000400
 80013b4:	48000800 	.word	0x48000800
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	0008      	movs	r0, r1
 80013c6:	0011      	movs	r1, r2
 80013c8:	1cbb      	adds	r3, r7, #2
 80013ca:	1c02      	adds	r2, r0, #0
 80013cc:	801a      	strh	r2, [r3, #0]
 80013ce:	1c7b      	adds	r3, r7, #1
 80013d0:	1c0a      	adds	r2, r1, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d4:	1c7b      	adds	r3, r7, #1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013dc:	1cbb      	adds	r3, r7, #2
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e6:	1cbb      	adds	r3, r7, #2
 80013e8:	881a      	ldrh	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e303      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4013      	ands	r3, r2
 8001412:	d100      	bne.n	8001416 <HAL_RCC_OscConfig+0x1e>
 8001414:	e08d      	b.n	8001532 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001416:	4bc4      	ldr	r3, [pc, #784]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	220c      	movs	r2, #12
 800141c:	4013      	ands	r3, r2
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00e      	beq.n	8001440 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001422:	4bc1      	ldr	r3, [pc, #772]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	220c      	movs	r2, #12
 8001428:	4013      	ands	r3, r2
 800142a:	2b08      	cmp	r3, #8
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x64>
 800142e:	4bbe      	ldr	r3, [pc, #760]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	401a      	ands	r2, r3
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	429a      	cmp	r2, r3
 800143e:	d10d      	bne.n	800145c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	4bb9      	ldr	r3, [pc, #740]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	029b      	lsls	r3, r3, #10
 8001448:	4013      	ands	r3, r2
 800144a:	d100      	bne.n	800144e <HAL_RCC_OscConfig+0x56>
 800144c:	e070      	b.n	8001530 <HAL_RCC_OscConfig+0x138>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d000      	beq.n	8001458 <HAL_RCC_OscConfig+0x60>
 8001456:	e06b      	b.n	8001530 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2da      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d107      	bne.n	8001474 <HAL_RCC_OscConfig+0x7c>
 8001464:	4bb0      	ldr	r3, [pc, #704]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4baf      	ldr	r3, [pc, #700]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0249      	lsls	r1, r1, #9
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e02f      	b.n	80014d4 <HAL_RCC_OscConfig+0xdc>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10c      	bne.n	8001496 <HAL_RCC_OscConfig+0x9e>
 800147c:	4baa      	ldr	r3, [pc, #680]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4ba9      	ldr	r3, [pc, #676]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001482:	49aa      	ldr	r1, [pc, #680]	; (800172c <HAL_RCC_OscConfig+0x334>)
 8001484:	400a      	ands	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	4ba7      	ldr	r3, [pc, #668]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4ba6      	ldr	r3, [pc, #664]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800148e:	49a8      	ldr	r1, [pc, #672]	; (8001730 <HAL_RCC_OscConfig+0x338>)
 8001490:	400a      	ands	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e01e      	b.n	80014d4 <HAL_RCC_OscConfig+0xdc>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d10e      	bne.n	80014bc <HAL_RCC_OscConfig+0xc4>
 800149e:	4ba2      	ldr	r3, [pc, #648]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4ba1      	ldr	r3, [pc, #644]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	02c9      	lsls	r1, r1, #11
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	4b9e      	ldr	r3, [pc, #632]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b9d      	ldr	r3, [pc, #628]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0249      	lsls	r1, r1, #9
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xdc>
 80014bc:	4b9a      	ldr	r3, [pc, #616]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b99      	ldr	r3, [pc, #612]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80014c2:	499a      	ldr	r1, [pc, #616]	; (800172c <HAL_RCC_OscConfig+0x334>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	4b97      	ldr	r3, [pc, #604]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b96      	ldr	r3, [pc, #600]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80014ce:	4998      	ldr	r1, [pc, #608]	; (8001730 <HAL_RCC_OscConfig+0x338>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d014      	beq.n	8001506 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fcb6 	bl	8000e4c <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e6:	f7ff fcb1 	bl	8000e4c <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b64      	cmp	r3, #100	; 0x64
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e28c      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f8:	4b8b      	ldr	r3, [pc, #556]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	029b      	lsls	r3, r3, #10
 8001500:	4013      	ands	r3, r2
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0xee>
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fca1 	bl	8000e4c <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fc9c 	bl	8000e4c <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e277      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b81      	ldr	r3, [pc, #516]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x118>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d100      	bne.n	800153e <HAL_RCC_OscConfig+0x146>
 800153c:	e069      	b.n	8001612 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800153e:	4b7a      	ldr	r3, [pc, #488]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	220c      	movs	r2, #12
 8001544:	4013      	ands	r3, r2
 8001546:	d00b      	beq.n	8001560 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001548:	4b77      	ldr	r3, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	220c      	movs	r2, #12
 800154e:	4013      	ands	r3, r2
 8001550:	2b08      	cmp	r3, #8
 8001552:	d11c      	bne.n	800158e <HAL_RCC_OscConfig+0x196>
 8001554:	4b74      	ldr	r3, [pc, #464]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	4013      	ands	r3, r2
 800155e:	d116      	bne.n	800158e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001560:	4b71      	ldr	r3, [pc, #452]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2202      	movs	r2, #2
 8001566:	4013      	ands	r3, r2
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x17e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e24d      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b6c      	ldr	r3, [pc, #432]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	22f8      	movs	r2, #248	; 0xf8
 800157c:	4393      	bics	r3, r2
 800157e:	0019      	movs	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	00da      	lsls	r2, r3, #3
 8001586:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158c:	e041      	b.n	8001612 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d024      	beq.n	80015e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001596:	4b64      	ldr	r3, [pc, #400]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b63      	ldr	r3, [pc, #396]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800159c:	2101      	movs	r1, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fc53 	bl	8000e4c <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc4e 	bl	8000e4c <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e229      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0f1      	beq.n	80015ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	22f8      	movs	r2, #248	; 0xf8
 80015ce:	4393      	bics	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00da      	lsls	r2, r3, #3
 80015d8:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e018      	b.n	8001612 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e0:	4b51      	ldr	r3, [pc, #324]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	438a      	bics	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc2e 	bl	8000e4c <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fc29 	bl	8000e4c <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e204      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2202      	movs	r2, #2
 800160e:	4013      	ands	r3, r2
 8001610:	d1f1      	bne.n	80015f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2208      	movs	r2, #8
 8001618:	4013      	ands	r3, r2
 800161a:	d036      	beq.n	800168a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d019      	beq.n	8001658 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001624:	4b40      	ldr	r3, [pc, #256]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800162a:	2101      	movs	r1, #1
 800162c:	430a      	orrs	r2, r1
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fc0c 	bl	8000e4c <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff fc07 	bl	8000e4c <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1e2      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	2202      	movs	r2, #2
 8001652:	4013      	ands	r3, r2
 8001654:	d0f1      	beq.n	800163a <HAL_RCC_OscConfig+0x242>
 8001656:	e018      	b.n	800168a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800165a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800165e:	2101      	movs	r1, #1
 8001660:	438a      	bics	r2, r1
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001664:	f7ff fbf2 	bl	8000e4c <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fbed 	bl	8000e4c <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1c8      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d1f1      	bne.n	800166e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2204      	movs	r2, #4
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x29e>
 8001694:	e0b6      	b.n	8001804 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	231f      	movs	r3, #31
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	055b      	lsls	r3, r3, #21
 80016a6:	4013      	ands	r3, r2
 80016a8:	d111      	bne.n	80016ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0549      	lsls	r1, r1, #21
 80016b4:	430a      	orrs	r2, r1
 80016b6:	61da      	str	r2, [r3, #28]
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	055b      	lsls	r3, r3, #21
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016c6:	231f      	movs	r3, #31
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_OscConfig+0x33c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_RCC_OscConfig+0x33c>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_RCC_OscConfig+0x33c>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	0049      	lsls	r1, r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e8:	f7ff fbb0 	bl	8000e4c <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fbab 	bl	8000e4c <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b64      	cmp	r3, #100	; 0x64
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e186      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_OscConfig+0x33c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4013      	ands	r3, r2
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d10f      	bne.n	8001738 <HAL_RCC_OscConfig+0x340>
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800171a:	6a1a      	ldr	r2, [r3, #32]
 800171c:	4b02      	ldr	r3, [pc, #8]	; (8001728 <HAL_RCC_OscConfig+0x330>)
 800171e:	2101      	movs	r1, #1
 8001720:	430a      	orrs	r2, r1
 8001722:	621a      	str	r2, [r3, #32]
 8001724:	e036      	b.n	8001794 <HAL_RCC_OscConfig+0x39c>
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	40021000 	.word	0x40021000
 800172c:	fffeffff 	.word	0xfffeffff
 8001730:	fffbffff 	.word	0xfffbffff
 8001734:	40007000 	.word	0x40007000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10c      	bne.n	800175a <HAL_RCC_OscConfig+0x362>
 8001740:	4bb6      	ldr	r3, [pc, #728]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	4bb5      	ldr	r3, [pc, #724]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001746:	2101      	movs	r1, #1
 8001748:	438a      	bics	r2, r1
 800174a:	621a      	str	r2, [r3, #32]
 800174c:	4bb3      	ldr	r3, [pc, #716]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800174e:	6a1a      	ldr	r2, [r3, #32]
 8001750:	4bb2      	ldr	r3, [pc, #712]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001752:	2104      	movs	r1, #4
 8001754:	438a      	bics	r2, r1
 8001756:	621a      	str	r2, [r3, #32]
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x39c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x384>
 8001762:	4bae      	ldr	r3, [pc, #696]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	4bad      	ldr	r3, [pc, #692]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001768:	2104      	movs	r1, #4
 800176a:	430a      	orrs	r2, r1
 800176c:	621a      	str	r2, [r3, #32]
 800176e:	4bab      	ldr	r3, [pc, #684]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001770:	6a1a      	ldr	r2, [r3, #32]
 8001772:	4baa      	ldr	r3, [pc, #680]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001774:	2101      	movs	r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	621a      	str	r2, [r3, #32]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x39c>
 800177c:	4ba7      	ldr	r3, [pc, #668]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800177e:	6a1a      	ldr	r2, [r3, #32]
 8001780:	4ba6      	ldr	r3, [pc, #664]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001782:	2101      	movs	r1, #1
 8001784:	438a      	bics	r2, r1
 8001786:	621a      	str	r2, [r3, #32]
 8001788:	4ba4      	ldr	r3, [pc, #656]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800178a:	6a1a      	ldr	r2, [r3, #32]
 800178c:	4ba3      	ldr	r3, [pc, #652]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800178e:	2104      	movs	r1, #4
 8001790:	438a      	bics	r2, r1
 8001792:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d014      	beq.n	80017c6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7ff fb56 	bl	8000e4c <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	e009      	b.n	80017ba <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fb51 	bl	8000e4c <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4a9b      	ldr	r2, [pc, #620]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e12b      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	4b98      	ldr	r3, [pc, #608]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x3ae>
 80017c4:	e013      	b.n	80017ee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb41 	bl	8000e4c <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	e009      	b.n	80017e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff fb3c 	bl	8000e4c <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	4a91      	ldr	r2, [pc, #580]	; (8001a20 <HAL_RCC_OscConfig+0x628>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e116      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	4b8d      	ldr	r3, [pc, #564]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	2202      	movs	r2, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017ee:	231f      	movs	r3, #31
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80017fa:	69da      	ldr	r2, [r3, #28]
 80017fc:	4b87      	ldr	r3, [pc, #540]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80017fe:	4989      	ldr	r1, [pc, #548]	; (8001a24 <HAL_RCC_OscConfig+0x62c>)
 8001800:	400a      	ands	r2, r1
 8001802:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2210      	movs	r2, #16
 800180a:	4013      	ands	r3, r2
 800180c:	d063      	beq.n	80018d6 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d12a      	bne.n	800186c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001816:	4b81      	ldr	r3, [pc, #516]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800181a:	4b80      	ldr	r3, [pc, #512]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800181c:	2104      	movs	r1, #4
 800181e:	430a      	orrs	r2, r1
 8001820:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001822:	4b7e      	ldr	r3, [pc, #504]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001828:	2101      	movs	r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182e:	f7ff fb0d 	bl	8000e4c <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001838:	f7ff fb08 	bl	8000e4c <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0e3      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800184a:	4b74      	ldr	r3, [pc, #464]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	2202      	movs	r2, #2
 8001850:	4013      	ands	r3, r2
 8001852:	d0f1      	beq.n	8001838 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001854:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	22f8      	movs	r2, #248	; 0xf8
 800185a:	4393      	bics	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	00da      	lsls	r2, r3, #3
 8001864:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001866:	430a      	orrs	r2, r1
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
 800186a:	e034      	b.n	80018d6 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	3305      	adds	r3, #5
 8001872:	d111      	bne.n	8001898 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001874:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800187a:	2104      	movs	r1, #4
 800187c:	438a      	bics	r2, r1
 800187e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001880:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	22f8      	movs	r2, #248	; 0xf8
 8001886:	4393      	bics	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	00da      	lsls	r2, r3, #3
 8001890:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001892:	430a      	orrs	r2, r1
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
 8001896:	e01e      	b.n	80018d6 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001898:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800189a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189c:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800189e:	2104      	movs	r1, #4
 80018a0:	430a      	orrs	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018a4:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80018a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a8:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	438a      	bics	r2, r1
 80018ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff facc 	bl	8000e4c <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018ba:	f7ff fac7 	bl	8000e4c <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0a2      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	2202      	movs	r2, #2
 80018d2:	4013      	ands	r3, r2
 80018d4:	d1f1      	bne.n	80018ba <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d100      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4e8>
 80018de:	e097      	b.n	8001a10 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e0:	4b4e      	ldr	r3, [pc, #312]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	220c      	movs	r2, #12
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d100      	bne.n	80018ee <HAL_RCC_OscConfig+0x4f6>
 80018ec:	e06b      	b.n	80019c6 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d14c      	bne.n	8001990 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b48      	ldr	r3, [pc, #288]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80018fc:	494a      	ldr	r1, [pc, #296]	; (8001a28 <HAL_RCC_OscConfig+0x630>)
 80018fe:	400a      	ands	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff faa3 	bl	8000e4c <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fa9e 	bl	8000e4c <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e079      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191e:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	049b      	lsls	r3, r3, #18
 8001926:	4013      	ands	r3, r2
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	220f      	movs	r2, #15
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800193a:	430a      	orrs	r2, r1
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
 800193e:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a3a      	ldr	r2, [pc, #232]	; (8001a2c <HAL_RCC_OscConfig+0x634>)
 8001944:	4013      	ands	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	431a      	orrs	r2, r3
 8001952:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001958:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	0449      	lsls	r1, r1, #17
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff fa71 	bl	8000e4c <HAL_GetTick>
 800196a:	0003      	movs	r3, r0
 800196c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fa6c 	bl	8000e4c <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e047      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	049b      	lsls	r3, r3, #18
 800198a:	4013      	ands	r3, r2
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x578>
 800198e:	e03f      	b.n	8001a10 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 8001996:	4924      	ldr	r1, [pc, #144]	; (8001a28 <HAL_RCC_OscConfig+0x630>)
 8001998:	400a      	ands	r2, r1
 800199a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fa56 	bl	8000e4c <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff fa51 	bl	8000e4c <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e02c      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	049b      	lsls	r3, r3, #18
 80019c0:	4013      	ands	r3, r2
 80019c2:	d1f0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x5ae>
 80019c4:	e024      	b.n	8001a10 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e01f      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_RCC_OscConfig+0x624>)
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	025b      	lsls	r3, r3, #9
 80019e4:	401a      	ands	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d10e      	bne.n	8001a0c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	220f      	movs	r2, #15
 80019f2:	401a      	ands	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	23f0      	movs	r3, #240	; 0xf0
 8001a00:	039b      	lsls	r3, r3, #14
 8001a02:	401a      	ands	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b008      	add	sp, #32
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	00001388 	.word	0x00001388
 8001a24:	efffffff 	.word	0xefffffff
 8001a28:	feffffff 	.word	0xfeffffff
 8001a2c:	ffc2ffff 	.word	0xffc2ffff

08001a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b3      	b.n	8001bac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <HAL_RCC_ClockConfig+0x184>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d911      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <HAL_RCC_ClockConfig+0x184>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4393      	bics	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_RCC_ClockConfig+0x184>)
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_ClockConfig+0x184>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e09a      	b.n	8001bac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d015      	beq.n	8001aac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2204      	movs	r2, #4
 8001a86:	4013      	ands	r3, r2
 8001a88:	d006      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a8a:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001a90:	21e0      	movs	r1, #224	; 0xe0
 8001a92:	00c9      	lsls	r1, r1, #3
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	22f0      	movs	r2, #240	; 0xf0
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	4b44      	ldr	r3, [pc, #272]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d040      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	029b      	lsls	r3, r3, #10
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d114      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e06e      	b.n	8001bac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	049b      	lsls	r3, r3, #18
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d108      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e062      	b.n	8001bac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2202      	movs	r2, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e05b      	b.n	8001bac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2203      	movs	r2, #3
 8001afa:	4393      	bics	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b08:	f7ff f9a0 	bl	8000e4c <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b12:	f7ff f99b 	bl	8000e4c <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <HAL_RCC_ClockConfig+0x18c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e042      	b.n	8001bac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1ec      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_RCC_ClockConfig+0x184>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d211      	bcs.n	8001b6a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_RCC_ClockConfig+0x184>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_RCC_ClockConfig+0x184>)
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_RCC_ClockConfig+0x184>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e020      	b.n	8001bac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4013      	ands	r3, r2
 8001b72:	d009      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <HAL_RCC_ClockConfig+0x190>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001b84:	430a      	orrs	r2, r1
 8001b86:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b88:	f000 f820 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001b8c:	0001      	movs	r1, r0
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x188>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	220f      	movs	r2, #15
 8001b96:	4013      	ands	r3, r2
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_RCC_ClockConfig+0x194>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	000a      	movs	r2, r1
 8001b9e:	40da      	lsrs	r2, r3
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x198>)
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7ff f90b 	bl	8000dc0 <HAL_InitTick>
  
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	00001388 	.word	0x00001388
 8001bc0:	fffff8ff 	.word	0xfffff8ff
 8001bc4:	08002fb0 	.word	0x08002fb0
 8001bc8:	20000000 	.word	0x20000000

08001bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b08f      	sub	sp, #60	; 0x3c
 8001bd0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bd2:	2314      	movs	r3, #20
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bda:	c313      	stmia	r3!, {r0, r1, r4}
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001be4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001be6:	c313      	stmia	r3!, {r0, r1, r4}
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	220c      	movs	r2, #12
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d002      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x4a>
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d003      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x50>
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c1a:	e02d      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	0c9b      	lsrs	r3, r3, #18
 8001c20:	220f      	movs	r2, #15
 8001c22:	4013      	ands	r3, r2
 8001c24:	2214      	movs	r2, #20
 8001c26:	18ba      	adds	r2, r7, r2
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	220f      	movs	r2, #15
 8001c32:	4013      	ands	r3, r2
 8001c34:	1d3a      	adds	r2, r7, #4
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	025b      	lsls	r3, r3, #9
 8001c40:	4013      	ands	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c46:	4812      	ldr	r0, [pc, #72]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c48:	f7fe fa66 	bl	8000118 <__udivsi3>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	001a      	movs	r2, r3
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	4353      	muls	r3, r2
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
 8001c56:	e009      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c5a:	000a      	movs	r2, r1
 8001c5c:	0152      	lsls	r2, r2, #5
 8001c5e:	1a52      	subs	r2, r2, r1
 8001c60:	0193      	lsls	r3, r2, #6
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	185b      	adds	r3, r3, r1
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c70:	e002      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c76:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b00f      	add	sp, #60	; 0x3c
 8001c80:	bd90      	pop	{r4, r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	08002f90 	.word	0x08002f90
 8001c88:	08002fa0 	.word	0x08002fa0
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	007a1200 	.word	0x007a1200

08001c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cac:	f7ff fff2 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb0:	0001      	movs	r1, r0
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	2207      	movs	r2, #7
 8001cba:	4013      	ands	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	40d9      	lsrs	r1, r3
 8001cc2:	000b      	movs	r3, r1
}    
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08002fc0 	.word	0x08002fc0

08001cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	4013      	ands	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001cf0:	e08f      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2317      	movs	r3, #23
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	055b      	lsls	r3, r3, #21
 8001d02:	4013      	ands	r3, r2
 8001d04:	d111      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b54      	ldr	r3, [pc, #336]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0549      	lsls	r1, r1, #21
 8001d10:	430a      	orrs	r2, r1
 8001d12:	61da      	str	r2, [r3, #28]
 8001d14:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	055b      	lsls	r3, r3, #21
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2317      	movs	r3, #23
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4013      	ands	r3, r2
 8001d34:	d11a      	bne.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	0049      	lsls	r1, r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d44:	f7ff f882 	bl	8000e4c <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e008      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff f87d 	bl	8000e4c <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	; 0x64
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e077      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d6c:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d6e:	6a1a      	ldr	r2, [r3, #32]
 8001d70:	23c0      	movs	r3, #192	; 0xc0
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d034      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d02c      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a33      	ldr	r2, [pc, #204]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d98:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	0249      	lsls	r1, r1, #9
 8001da2:	430a      	orrs	r2, r1
 8001da4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dac:	492d      	ldr	r1, [pc, #180]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001dae:	400a      	ands	r2, r1
 8001db0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f844 	bl	8000e4c <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc8:	e009      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff f83f 	bl	8000e4c <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e038      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	2202      	movs	r2, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dfc:	2317      	movs	r3, #23
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d105      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e0c:	4917      	ldr	r1, [pc, #92]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e0e:	400a      	ands	r2, r1
 8001e10:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	2203      	movs	r2, #3
 8001e22:	4393      	bics	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2220      	movs	r2, #32
 8001e36:	4013      	ands	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	2210      	movs	r2, #16
 8001e40:	4393      	bics	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b006      	add	sp, #24
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	fffffcff 	.word	0xfffffcff
 8001e64:	fffeffff 	.word	0xfffeffff
 8001e68:	00001388 	.word	0x00001388
 8001e6c:	efffffff 	.word	0xefffffff

08001e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e044      	b.n	8001f0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d107      	bne.n	8001e9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2270      	movs	r2, #112	; 0x70
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7fe fea7 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2224      	movs	r2, #36	; 0x24
 8001e9e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 fac8 	bl	8002448 <UART_SetConfig>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e024      	b.n	8001f0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 fc29 	bl	8002724 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	490d      	ldr	r1, [pc, #52]	; (8001f14 <HAL_UART_Init+0xa4>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	212a      	movs	r1, #42	; 0x2a
 8001eee:	438a      	bics	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f000 fcc1 	bl	800288c <UART_CheckIdleState>
 8001f0a:	0003      	movs	r3, r0
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	ffffb7ff 	.word	0xffffb7ff

08001f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	1dbb      	adds	r3, r7, #6
 8001f26:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d000      	beq.n	8001f32 <HAL_UART_Transmit+0x1a>
 8001f30:	e095      	b.n	800205e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_UART_Transmit+0x28>
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e08d      	b.n	8002060 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	015b      	lsls	r3, r3, #5
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d109      	bne.n	8001f64 <HAL_UART_Transmit+0x4c>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d001      	beq.n	8001f64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e07d      	b.n	8002060 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2270      	movs	r2, #112	; 0x70
 8001f68:	5c9b      	ldrb	r3, [r3, r2]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_UART_Transmit+0x5a>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e076      	b.n	8002060 <HAL_UART_Transmit+0x148>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2270      	movs	r2, #112	; 0x70
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2221      	movs	r2, #33	; 0x21
 8001f84:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001f86:	f7fe ff61 	bl	8000e4c <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1dba      	adds	r2, r7, #6
 8001f92:	2150      	movs	r1, #80	; 0x50
 8001f94:	8812      	ldrh	r2, [r2, #0]
 8001f96:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1dba      	adds	r2, r7, #6
 8001f9c:	2152      	movs	r1, #82	; 0x52
 8001f9e:	8812      	ldrh	r2, [r2, #0]
 8001fa0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	015b      	lsls	r3, r3, #5
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d108      	bne.n	8001fc0 <HAL_UART_Transmit+0xa8>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d104      	bne.n	8001fc0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	e003      	b.n	8001fc8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fc8:	e02d      	b.n	8002026 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	0013      	movs	r3, r2
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	f000 fc9e 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 8001fdc:	1e03      	subs	r3, r0, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e03d      	b.n	8002060 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10b      	bne.n	8002002 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	881a      	ldrh	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	05d2      	lsls	r2, r2, #23
 8001ff4:	0dd2      	lsrs	r2, r2, #23
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	e008      	b.n	8002014 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b292      	uxth	r2, r2
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2252      	movs	r2, #82	; 0x52
 8002018:	5a9b      	ldrh	r3, [r3, r2]
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b299      	uxth	r1, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2252      	movs	r2, #82	; 0x52
 8002024:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2252      	movs	r2, #82	; 0x52
 800202a:	5a9b      	ldrh	r3, [r3, r2]
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1cb      	bne.n	8001fca <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	0013      	movs	r3, r2
 800203c:	2200      	movs	r2, #0
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	f000 fc6a 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d001      	beq.n	800204c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e009      	b.n	8002060 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2220      	movs	r2, #32
 8002050:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2270      	movs	r2, #112	; 0x70
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800205e:	2302      	movs	r3, #2
  }
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b008      	add	sp, #32
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	1dbb      	adds	r3, r7, #6
 8002074:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800207a:	2b20      	cmp	r3, #32
 800207c:	d000      	beq.n	8002080 <HAL_UART_Receive_IT+0x18>
 800207e:	e08b      	b.n	8002198 <HAL_UART_Receive_IT+0x130>
  {
    if ((pData == NULL) || (Size == 0U))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_UART_Receive_IT+0x26>
 8002086:	1dbb      	adds	r3, r7, #6
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e083      	b.n	800219a <HAL_UART_Receive_IT+0x132>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	015b      	lsls	r3, r3, #5
 800209a:	429a      	cmp	r2, r3
 800209c:	d109      	bne.n	80020b2 <HAL_UART_Receive_IT+0x4a>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2201      	movs	r2, #1
 80020aa:	4013      	ands	r3, r2
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e073      	b.n	800219a <HAL_UART_Receive_IT+0x132>
      }
    }

    __HAL_LOCK(huart);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2270      	movs	r2, #112	; 0x70
 80020b6:	5c9b      	ldrb	r3, [r3, r2]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_UART_Receive_IT+0x58>
 80020bc:	2302      	movs	r3, #2
 80020be:	e06c      	b.n	800219a <HAL_UART_Receive_IT+0x132>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2270      	movs	r2, #112	; 0x70
 80020c4:	2101      	movs	r1, #1
 80020c6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1dba      	adds	r2, r7, #6
 80020d2:	2158      	movs	r1, #88	; 0x58
 80020d4:	8812      	ldrh	r2, [r2, #0]
 80020d6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1dba      	adds	r2, r7, #6
 80020dc:	215a      	movs	r1, #90	; 0x5a
 80020de:	8812      	ldrh	r2, [r2, #0]
 80020e0:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	015b      	lsls	r3, r3, #5
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d10d      	bne.n	8002110 <HAL_UART_Receive_IT+0xa8>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d104      	bne.n	8002106 <HAL_UART_Receive_IT+0x9e>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	225c      	movs	r2, #92	; 0x5c
 8002100:	4928      	ldr	r1, [pc, #160]	; (80021a4 <HAL_UART_Receive_IT+0x13c>)
 8002102:	5299      	strh	r1, [r3, r2]
 8002104:	e01a      	b.n	800213c <HAL_UART_Receive_IT+0xd4>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	225c      	movs	r2, #92	; 0x5c
 800210a:	21ff      	movs	r1, #255	; 0xff
 800210c:	5299      	strh	r1, [r3, r2]
 800210e:	e015      	b.n	800213c <HAL_UART_Receive_IT+0xd4>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10d      	bne.n	8002134 <HAL_UART_Receive_IT+0xcc>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d104      	bne.n	800212a <HAL_UART_Receive_IT+0xc2>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	225c      	movs	r2, #92	; 0x5c
 8002124:	21ff      	movs	r1, #255	; 0xff
 8002126:	5299      	strh	r1, [r3, r2]
 8002128:	e008      	b.n	800213c <HAL_UART_Receive_IT+0xd4>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	225c      	movs	r2, #92	; 0x5c
 800212e:	217f      	movs	r1, #127	; 0x7f
 8002130:	5299      	strh	r1, [r3, r2]
 8002132:	e003      	b.n	800213c <HAL_UART_Receive_IT+0xd4>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	225c      	movs	r2, #92	; 0x5c
 8002138:	2100      	movs	r1, #0
 800213a:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2222      	movs	r2, #34	; 0x22
 8002146:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2101      	movs	r1, #1
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	015b      	lsls	r3, r3, #5
 8002160:	429a      	cmp	r2, r3
 8002162:	d107      	bne.n	8002174 <HAL_UART_Receive_IT+0x10c>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <HAL_UART_Receive_IT+0x10c>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_UART_Receive_IT+0x140>)
 8002170:	661a      	str	r2, [r3, #96]	; 0x60
 8002172:	e002      	b.n	800217a <HAL_UART_Receive_IT+0x112>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <HAL_UART_Receive_IT+0x144>)
 8002178:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2270      	movs	r2, #112	; 0x70
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2190      	movs	r1, #144	; 0x90
 800218e:	0049      	lsls	r1, r1, #1
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_UART_Receive_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b004      	add	sp, #16
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	000001ff 	.word	0x000001ff
 80021a8:	08002b75 	.word	0x08002b75
 80021ac:	08002ab9 	.word	0x08002ab9

080021b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	4a93      	ldr	r2, [pc, #588]	; (8002420 <HAL_UART_IRQHandler+0x270>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d112      	bne.n	8002204 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2220      	movs	r2, #32
 80021e2:	4013      	ands	r3, r2
 80021e4:	d00e      	beq.n	8002204 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2220      	movs	r2, #32
 80021ea:	4013      	ands	r3, r2
 80021ec:	d00a      	beq.n	8002204 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d100      	bne.n	80021f8 <HAL_UART_IRQHandler+0x48>
 80021f6:	e10b      	b.n	8002410 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	0010      	movs	r0, r2
 8002200:	4798      	blx	r3
      }
      return;
 8002202:	e105      	b.n	8002410 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d100      	bne.n	800220c <HAL_UART_IRQHandler+0x5c>
 800220a:	e0cd      	b.n	80023a8 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	d105      	bne.n	8002220 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	2390      	movs	r3, #144	; 0x90
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4013      	ands	r3, r2
 800221c:	d100      	bne.n	8002220 <HAL_UART_IRQHandler+0x70>
 800221e:	e0c3      	b.n	80023a8 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2201      	movs	r2, #1
 8002224:	4013      	ands	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_UART_IRQHandler+0x96>
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4013      	ands	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800223e:	2201      	movs	r2, #1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	2202      	movs	r2, #2
 800224a:	4013      	ands	r3, r2
 800224c:	d00d      	beq.n	800226a <HAL_UART_IRQHandler+0xba>
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2202      	movs	r2, #2
 800225c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002262:	2204      	movs	r2, #4
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	2204      	movs	r2, #4
 800226e:	4013      	ands	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_UART_IRQHandler+0xde>
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2201      	movs	r2, #1
 8002276:	4013      	ands	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2204      	movs	r2, #4
 8002280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002286:	2202      	movs	r2, #2
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	2208      	movs	r2, #8
 8002292:	4013      	ands	r3, r2
 8002294:	d011      	beq.n	80022ba <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	2220      	movs	r2, #32
 800229a:	4013      	ands	r3, r2
 800229c:	d103      	bne.n	80022a6 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022a4:	d009      	beq.n	80022ba <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2208      	movs	r2, #8
 80022ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b2:	2208      	movs	r2, #8
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	4013      	ands	r3, r2
 80022c2:	d00f      	beq.n	80022e4 <HAL_UART_IRQHandler+0x134>
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	04db      	lsls	r3, r3, #19
 80022ca:	4013      	ands	r3, r2
 80022cc:	d00a      	beq.n	80022e4 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022dc:	2220      	movs	r2, #32
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <HAL_UART_IRQHandler+0x13e>
 80022ec:	e092      	b.n	8002414 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2220      	movs	r2, #32
 80022f2:	4013      	ands	r3, r2
 80022f4:	d00c      	beq.n	8002310 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2220      	movs	r2, #32
 80022fa:	4013      	ands	r3, r2
 80022fc:	d008      	beq.n	8002310 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	0010      	movs	r0, r2
 800230e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002314:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2240      	movs	r2, #64	; 0x40
 800231e:	4013      	ands	r3, r2
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d003      	beq.n	800232c <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2228      	movs	r2, #40	; 0x28
 8002328:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800232a:	d033      	beq.n	8002394 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f000 fb70 	bl	8002a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	4013      	ands	r3, r2
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d123      	bne.n	800238a <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2140      	movs	r1, #64	; 0x40
 800234e:	438a      	bics	r2, r1
 8002350:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d012      	beq.n	8002380 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235e:	4a31      	ldr	r2, [pc, #196]	; (8002424 <HAL_UART_IRQHandler+0x274>)
 8002360:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002366:	0018      	movs	r0, r3
 8002368:	f7fe fe7a 	bl	8001060 <HAL_DMA_Abort_IT>
 800236c:	1e03      	subs	r3, r0, #0
 800236e:	d019      	beq.n	80023a4 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237a:	0018      	movs	r0, r3
 800237c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800237e:	e011      	b.n	80023a4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0018      	movs	r0, r3
 8002384:	f000 f858 	bl	8002438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002388:	e00c      	b.n	80023a4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f000 f853 	bl	8002438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002392:	e007      	b.n	80023a4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	0018      	movs	r0, r3
 8002398:	f000 f84e 	bl	8002438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80023a2:	e037      	b.n	8002414 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a4:	46c0      	nop			; (mov r8, r8)
    return;
 80023a6:	e035      	b.n	8002414 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	035b      	lsls	r3, r3, #13
 80023ae:	4013      	ands	r3, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_UART_IRQHandler+0x220>
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	03db      	lsls	r3, r3, #15
 80023b8:	4013      	ands	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	0352      	lsls	r2, r2, #13
 80023c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 fc31 	bl	8002c30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023ce:	e024      	b.n	800241a <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	4013      	ands	r3, r2
 80023d6:	d00d      	beq.n	80023f4 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	4013      	ands	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d017      	beq.n	8002418 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	0010      	movs	r0, r2
 80023f0:	4798      	blx	r3
    }
    return;
 80023f2:	e011      	b.n	8002418 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2240      	movs	r2, #64	; 0x40
 80023f8:	4013      	ands	r3, r2
 80023fa:	d00e      	beq.n	800241a <HAL_UART_IRQHandler+0x26a>
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	4013      	ands	r3, r2
 8002402:	d00a      	beq.n	800241a <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f000 fb3b 	bl	8002a82 <UART_EndTransmit_IT>
    return;
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	e004      	b.n	800241a <HAL_UART_IRQHandler+0x26a>
      return;
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	e002      	b.n	800241a <HAL_UART_IRQHandler+0x26a>
    return;
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	e000      	b.n	800241a <HAL_UART_IRQHandler+0x26a>
    return;
 8002418:	46c0      	nop			; (mov r8, r8)
  }

}
 800241a:	46bd      	mov	sp, r7
 800241c:	b008      	add	sp, #32
 800241e:	bd80      	pop	{r7, pc}
 8002420:	0000080f 	.word	0x0000080f
 8002424:	08002a55 	.word	0x08002a55

08002428 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002454:	2317      	movs	r3, #23
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4aa3      	ldr	r2, [pc, #652]	; (8002708 <UART_SetConfig+0x2c0>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a9e      	ldr	r2, [pc, #632]	; (800270c <UART_SetConfig+0x2c4>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a95      	ldr	r2, [pc, #596]	; (8002710 <UART_SetConfig+0x2c8>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024c8:	4b92      	ldr	r3, [pc, #584]	; (8002714 <UART_SetConfig+0x2cc>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	2203      	movs	r2, #3
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d00f      	beq.n	80024f4 <UART_SetConfig+0xac>
 80024d4:	d304      	bcc.n	80024e0 <UART_SetConfig+0x98>
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d011      	beq.n	80024fe <UART_SetConfig+0xb6>
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d005      	beq.n	80024ea <UART_SetConfig+0xa2>
 80024de:	e013      	b.n	8002508 <UART_SetConfig+0xc0>
 80024e0:	231f      	movs	r3, #31
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e012      	b.n	8002510 <UART_SetConfig+0xc8>
 80024ea:	231f      	movs	r3, #31
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2202      	movs	r2, #2
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e00d      	b.n	8002510 <UART_SetConfig+0xc8>
 80024f4:	231f      	movs	r3, #31
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2204      	movs	r2, #4
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e008      	b.n	8002510 <UART_SetConfig+0xc8>
 80024fe:	231f      	movs	r3, #31
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2208      	movs	r2, #8
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e003      	b.n	8002510 <UART_SetConfig+0xc8>
 8002508:	231f      	movs	r3, #31
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	2210      	movs	r2, #16
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	429a      	cmp	r2, r3
 800251c:	d000      	beq.n	8002520 <UART_SetConfig+0xd8>
 800251e:	e07d      	b.n	800261c <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8002520:	231f      	movs	r3, #31
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d01c      	beq.n	8002564 <UART_SetConfig+0x11c>
 800252a:	dc02      	bgt.n	8002532 <UART_SetConfig+0xea>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <UART_SetConfig+0xf4>
 8002530:	e04b      	b.n	80025ca <UART_SetConfig+0x182>
 8002532:	2b04      	cmp	r3, #4
 8002534:	d025      	beq.n	8002582 <UART_SetConfig+0x13a>
 8002536:	2b08      	cmp	r3, #8
 8002538:	d037      	beq.n	80025aa <UART_SetConfig+0x162>
 800253a:	e046      	b.n	80025ca <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800253c:	f7ff fbb4 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002540:	0003      	movs	r3, r0
 8002542:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	005a      	lsls	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	18d2      	adds	r2, r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0019      	movs	r1, r3
 8002556:	0010      	movs	r0, r2
 8002558:	f7fd fdde 	bl	8000118 <__udivsi3>
 800255c:	0003      	movs	r3, r0
 800255e:	b29b      	uxth	r3, r3
 8002560:	61bb      	str	r3, [r7, #24]
        break;
 8002562:	e037      	b.n	80025d4 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	4a6b      	ldr	r2, [pc, #428]	; (8002718 <UART_SetConfig+0x2d0>)
 800256c:	189a      	adds	r2, r3, r2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	0019      	movs	r1, r3
 8002574:	0010      	movs	r0, r2
 8002576:	f7fd fdcf 	bl	8000118 <__udivsi3>
 800257a:	0003      	movs	r3, r0
 800257c:	b29b      	uxth	r3, r3
 800257e:	61bb      	str	r3, [r7, #24]
        break;
 8002580:	e028      	b.n	80025d4 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002582:	f7ff fb23 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8002586:	0003      	movs	r3, r0
 8002588:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	005a      	lsls	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	18d2      	adds	r2, r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0019      	movs	r1, r3
 800259c:	0010      	movs	r0, r2
 800259e:	f7fd fdbb 	bl	8000118 <__udivsi3>
 80025a2:	0003      	movs	r3, r0
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	61bb      	str	r3, [r7, #24]
        break;
 80025a8:	e014      	b.n	80025d4 <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	0252      	lsls	r2, r2, #9
 80025b4:	189a      	adds	r2, r3, r2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	0019      	movs	r1, r3
 80025bc:	0010      	movs	r0, r2
 80025be:	f7fd fdab 	bl	8000118 <__udivsi3>
 80025c2:	0003      	movs	r3, r0
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	61bb      	str	r3, [r7, #24]
        break;
 80025c8:	e004      	b.n	80025d4 <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 80025ca:	2317      	movs	r3, #23
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
        break;
 80025d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	d91b      	bls.n	8002612 <UART_SetConfig+0x1ca>
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4a4f      	ldr	r2, [pc, #316]	; (800271c <UART_SetConfig+0x2d4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d817      	bhi.n	8002612 <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	200a      	movs	r0, #10
 80025e8:	183b      	adds	r3, r7, r0
 80025ea:	210f      	movs	r1, #15
 80025ec:	438a      	bics	r2, r1
 80025ee:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2207      	movs	r2, #7
 80025f8:	4013      	ands	r3, r2
 80025fa:	b299      	uxth	r1, r3
 80025fc:	183b      	adds	r3, r7, r0
 80025fe:	183a      	adds	r2, r7, r0
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	183a      	adds	r2, r7, r0
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	60da      	str	r2, [r3, #12]
 8002610:	e06c      	b.n	80026ec <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8002612:	2317      	movs	r3, #23
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e067      	b.n	80026ec <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 800261c:	231f      	movs	r3, #31
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d01b      	beq.n	800265e <UART_SetConfig+0x216>
 8002626:	dc02      	bgt.n	800262e <UART_SetConfig+0x1e6>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <UART_SetConfig+0x1f0>
 800262c:	e049      	b.n	80026c2 <UART_SetConfig+0x27a>
 800262e:	2b04      	cmp	r3, #4
 8002630:	d024      	beq.n	800267c <UART_SetConfig+0x234>
 8002632:	2b08      	cmp	r3, #8
 8002634:	d035      	beq.n	80026a2 <UART_SetConfig+0x25a>
 8002636:	e044      	b.n	80026c2 <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002638:	f7ff fb36 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 800263c:	0003      	movs	r3, r0
 800263e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	085a      	lsrs	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	18d2      	adds	r2, r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0019      	movs	r1, r3
 8002650:	0010      	movs	r0, r2
 8002652:	f7fd fd61 	bl	8000118 <__udivsi3>
 8002656:	0003      	movs	r3, r0
 8002658:	b29b      	uxth	r3, r3
 800265a:	61bb      	str	r3, [r7, #24]
        break;
 800265c:	e036      	b.n	80026cc <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <UART_SetConfig+0x2d8>)
 8002666:	189a      	adds	r2, r3, r2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0019      	movs	r1, r3
 800266e:	0010      	movs	r0, r2
 8002670:	f7fd fd52 	bl	8000118 <__udivsi3>
 8002674:	0003      	movs	r3, r0
 8002676:	b29b      	uxth	r3, r3
 8002678:	61bb      	str	r3, [r7, #24]
        break;
 800267a:	e027      	b.n	80026cc <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800267c:	f7ff faa6 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8002680:	0003      	movs	r3, r0
 8002682:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	085a      	lsrs	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	18d2      	adds	r2, r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0019      	movs	r1, r3
 8002694:	0010      	movs	r0, r2
 8002696:	f7fd fd3f 	bl	8000118 <__udivsi3>
 800269a:	0003      	movs	r3, r0
 800269c:	b29b      	uxth	r3, r3
 800269e:	61bb      	str	r3, [r7, #24]
        break;
 80026a0:	e014      	b.n	80026cc <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	0212      	lsls	r2, r2, #8
 80026ac:	189a      	adds	r2, r3, r2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0019      	movs	r1, r3
 80026b4:	0010      	movs	r0, r2
 80026b6:	f7fd fd2f 	bl	8000118 <__udivsi3>
 80026ba:	0003      	movs	r3, r0
 80026bc:	b29b      	uxth	r3, r3
 80026be:	61bb      	str	r3, [r7, #24]
        break;
 80026c0:	e004      	b.n	80026cc <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 80026c2:	2317      	movs	r3, #23
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
        break;
 80026ca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	d908      	bls.n	80026e4 <UART_SetConfig+0x29c>
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <UART_SetConfig+0x2d4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d804      	bhi.n	80026e4 <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	e003      	b.n	80026ec <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 80026e4:	2317      	movs	r3, #23
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80026f8:	2317      	movs	r3, #23
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	781b      	ldrb	r3, [r3, #0]
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b008      	add	sp, #32
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	ffff69f3 	.word	0xffff69f3
 800270c:	ffffcfff 	.word	0xffffcfff
 8002710:	fffff4ff 	.word	0xfffff4ff
 8002714:	40021000 	.word	0x40021000
 8002718:	00f42400 	.word	0x00f42400
 800271c:	0000ffff 	.word	0x0000ffff
 8002720:	007a1200 	.word	0x007a1200

08002724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2201      	movs	r2, #1
 8002732:	4013      	ands	r3, r2
 8002734:	d00b      	beq.n	800274e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a4a      	ldr	r2, [pc, #296]	; (8002868 <UART_AdvFeatureConfig+0x144>)
 800273e:	4013      	ands	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2202      	movs	r2, #2
 8002754:	4013      	ands	r3, r2
 8002756:	d00b      	beq.n	8002770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a43      	ldr	r2, [pc, #268]	; (800286c <UART_AdvFeatureConfig+0x148>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2204      	movs	r2, #4
 8002776:	4013      	ands	r3, r2
 8002778:	d00b      	beq.n	8002792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a3b      	ldr	r2, [pc, #236]	; (8002870 <UART_AdvFeatureConfig+0x14c>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	2208      	movs	r2, #8
 8002798:	4013      	ands	r3, r2
 800279a:	d00b      	beq.n	80027b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4a34      	ldr	r2, [pc, #208]	; (8002874 <UART_AdvFeatureConfig+0x150>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2210      	movs	r2, #16
 80027ba:	4013      	ands	r3, r2
 80027bc:	d00b      	beq.n	80027d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <UART_AdvFeatureConfig+0x154>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2220      	movs	r2, #32
 80027dc:	4013      	ands	r3, r2
 80027de:	d00b      	beq.n	80027f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	4a25      	ldr	r2, [pc, #148]	; (800287c <UART_AdvFeatureConfig+0x158>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2240      	movs	r2, #64	; 0x40
 80027fe:	4013      	ands	r3, r2
 8002800:	d01d      	beq.n	800283e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a1d      	ldr	r2, [pc, #116]	; (8002880 <UART_AdvFeatureConfig+0x15c>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	035b      	lsls	r3, r3, #13
 8002822:	429a      	cmp	r2, r3
 8002824:	d10b      	bne.n	800283e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a15      	ldr	r2, [pc, #84]	; (8002884 <UART_AdvFeatureConfig+0x160>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	4013      	ands	r3, r2
 8002846:	d00b      	beq.n	8002860 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <UART_AdvFeatureConfig+0x164>)
 8002850:	4013      	ands	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	605a      	str	r2, [r3, #4]
  }
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}
 8002868:	fffdffff 	.word	0xfffdffff
 800286c:	fffeffff 	.word	0xfffeffff
 8002870:	fffbffff 	.word	0xfffbffff
 8002874:	ffff7fff 	.word	0xffff7fff
 8002878:	ffffefff 	.word	0xffffefff
 800287c:	ffffdfff 	.word	0xffffdfff
 8002880:	ffefffff 	.word	0xffefffff
 8002884:	ff9fffff 	.word	0xff9fffff
 8002888:	fff7ffff 	.word	0xfff7ffff

0800288c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800289a:	f7fe fad7 	bl	8000e4c <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2208      	movs	r2, #8
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d10d      	bne.n	80028cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	0399      	lsls	r1, r3, #14
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <UART_CheckIdleState+0x88>)
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	0013      	movs	r3, r2
 80028be:	2200      	movs	r2, #0
 80028c0:	f000 f82a 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e01f      	b.n	800290c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2204      	movs	r2, #4
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d10d      	bne.n	80028f6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	03d9      	lsls	r1, r3, #15
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <UART_CheckIdleState+0x88>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	0013      	movs	r3, r2
 80028e8:	2200      	movs	r2, #0
 80028ea:	f000 f815 	bl	8002918 <UART_WaitOnFlagUntilTimeout>
 80028ee:	1e03      	subs	r3, r0, #0
 80028f0:	d001      	beq.n	80028f6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e00a      	b.n	800290c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2270      	movs	r2, #112	; 0x70
 8002906:	2100      	movs	r1, #0
 8002908:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b004      	add	sp, #16
 8002912:	bd80      	pop	{r7, pc}
 8002914:	01ffffff 	.word	0x01ffffff

08002918 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	1dfb      	adds	r3, r7, #7
 8002926:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002928:	e05d      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	3301      	adds	r3, #1
 800292e:	d05a      	beq.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002930:	f7fe fa8c 	bl	8000e4c <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	429a      	cmp	r2, r3
 800293e:	d302      	bcc.n	8002946 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11b      	bne.n	800297e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	492f      	ldr	r1, [pc, #188]	; (8002a10 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002952:	400a      	ands	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2101      	movs	r1, #1
 8002962:	438a      	bics	r2, r1
 8002964:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2270      	movs	r2, #112	; 0x70
 8002976:	2100      	movs	r1, #0
 8002978:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e043      	b.n	8002a06 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2204      	movs	r2, #4
 8002986:	4013      	ands	r3, r2
 8002988:	d02d      	beq.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	401a      	ands	r2, r3
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	429a      	cmp	r2, r3
 800299c:	d123      	bne.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4917      	ldr	r1, [pc, #92]	; (8002a10 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	438a      	bics	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2270      	movs	r2, #112	; 0x70
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e00f      	b.n	8002a06 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	425a      	negs	r2, r3
 80029f6:	4153      	adcs	r3, r2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	001a      	movs	r2, r3
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d092      	beq.n	800292a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	0018      	movs	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b004      	add	sp, #16
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	fffffe5f 	.word	0xfffffe5f

08002a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	490a      	ldr	r1, [pc, #40]	; (8002a50 <UART_EndRxTransfer+0x3c>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2101      	movs	r1, #1
 8002a38:	438a      	bics	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	fffffedf 	.word	0xfffffedf

08002a54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	225a      	movs	r2, #90	; 0x5a
 8002a66:	2100      	movs	r1, #0
 8002a68:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2252      	movs	r2, #82	; 0x52
 8002a6e:	2100      	movs	r1, #0
 8002a70:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7ff fcdf 	bl	8002438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b004      	add	sp, #16
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	438a      	bics	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff fcbd 	bl	8002428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002ac0:	230e      	movs	r3, #14
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	215c      	movs	r1, #92	; 0x5c
 8002ac8:	5a52      	ldrh	r2, [r2, r1]
 8002aca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad0:	2b22      	cmp	r3, #34	; 0x22
 8002ad2:	d140      	bne.n	8002b56 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	210c      	movs	r1, #12
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002ade:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	230e      	movs	r3, #14
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b2d9      	uxtb	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	400a      	ands	r2, r1
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	225a      	movs	r2, #90	; 0x5a
 8002b06:	5a9b      	ldrh	r3, [r3, r2]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b299      	uxth	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	225a      	movs	r2, #90	; 0x5a
 8002b12:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	225a      	movs	r2, #90	; 0x5a
 8002b18:	5a9b      	ldrh	r3, [r3, r2]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d122      	bne.n	8002b66 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4911      	ldr	r1, [pc, #68]	; (8002b70 <UART_RxISR_8BIT+0xb8>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7fd ffca 	bl	8000ae8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002b54:	e007      	b.n	8002b66 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2108      	movs	r1, #8
 8002b62:	430a      	orrs	r2, r1
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b004      	add	sp, #16
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	fffffedf 	.word	0xfffffedf

08002b74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002b7c:	230e      	movs	r3, #14
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	215c      	movs	r1, #92	; 0x5c
 8002b84:	5a52      	ldrh	r2, [r2, r1]
 8002b86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8c:	2b22      	cmp	r3, #34	; 0x22
 8002b8e:	d140      	bne.n	8002c12 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	210c      	movs	r1, #12
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002b9a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	220e      	movs	r2, #14
 8002ba6:	18ba      	adds	r2, r7, r2
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	4013      	ands	r3, r2
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb8:	1c9a      	adds	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	225a      	movs	r2, #90	; 0x5a
 8002bc2:	5a9b      	ldrh	r3, [r3, r2]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b299      	uxth	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	225a      	movs	r2, #90	; 0x5a
 8002bce:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	225a      	movs	r2, #90	; 0x5a
 8002bd4:	5a9b      	ldrh	r3, [r3, r2]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d122      	bne.n	8002c22 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4911      	ldr	r1, [pc, #68]	; (8002c2c <UART_RxISR_16BIT+0xb8>)
 8002be8:	400a      	ands	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f7fd ff6c 	bl	8000ae8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c10:	e007      	b.n	8002c22 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2108      	movs	r1, #8
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	619a      	str	r2, [r3, #24]
}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b004      	add	sp, #16
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	fffffedf 	.word	0xfffffedf

08002c30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <__errno>:
 8002c40:	4b01      	ldr	r3, [pc, #4]	; (8002c48 <__errno+0x8>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	4770      	bx	lr
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	2600      	movs	r6, #0
 8002c50:	4d0c      	ldr	r5, [pc, #48]	; (8002c84 <__libc_init_array+0x38>)
 8002c52:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <__libc_init_array+0x3c>)
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	f000 f917 	bl	8002e90 <_init>
 8002c62:	4d0a      	ldr	r5, [pc, #40]	; (8002c8c <__libc_init_array+0x40>)
 8002c64:	4c0a      	ldr	r4, [pc, #40]	; (8002c90 <__libc_init_array+0x44>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	00b3      	lsls	r3, r6, #2
 8002c72:	58eb      	ldr	r3, [r5, r3]
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	00b3      	lsls	r3, r6, #2
 8002c7c:	58eb      	ldr	r3, [r5, r3]
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	08002fc8 	.word	0x08002fc8
 8002c88:	08002fc8 	.word	0x08002fc8
 8002c8c:	08002fc8 	.word	0x08002fc8
 8002c90:	08002fcc 	.word	0x08002fcc

08002c94 <malloc>:
 8002c94:	b510      	push	{r4, lr}
 8002c96:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <malloc+0x10>)
 8002c98:	0001      	movs	r1, r0
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	f000 f860 	bl	8002d60 <_malloc_r>
 8002ca0:	bd10      	pop	{r4, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	2000000c 	.word	0x2000000c

08002ca8 <free>:
 8002ca8:	b510      	push	{r4, lr}
 8002caa:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <free+0x10>)
 8002cac:	0001      	movs	r1, r0
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	f000 f80c 	bl	8002ccc <_free_r>
 8002cb4:	bd10      	pop	{r4, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	2000000c 	.word	0x2000000c

08002cbc <memset>:
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	1812      	adds	r2, r2, r0
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d100      	bne.n	8002cc6 <memset+0xa>
 8002cc4:	4770      	bx	lr
 8002cc6:	7019      	strb	r1, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	e7f9      	b.n	8002cc0 <memset+0x4>

08002ccc <_free_r>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	0005      	movs	r5, r0
 8002cd0:	2900      	cmp	r1, #0
 8002cd2:	d010      	beq.n	8002cf6 <_free_r+0x2a>
 8002cd4:	1f0c      	subs	r4, r1, #4
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da00      	bge.n	8002cde <_free_r+0x12>
 8002cdc:	18e4      	adds	r4, r4, r3
 8002cde:	0028      	movs	r0, r5
 8002ce0:	f000 f8d4 	bl	8002e8c <__malloc_lock>
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <_free_r+0x90>)
 8002ce6:	6813      	ldr	r3, [r2, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <_free_r+0x2c>
 8002cec:	6063      	str	r3, [r4, #4]
 8002cee:	6014      	str	r4, [r2, #0]
 8002cf0:	0028      	movs	r0, r5
 8002cf2:	f000 f8cc 	bl	8002e8e <__malloc_unlock>
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	42a3      	cmp	r3, r4
 8002cfa:	d909      	bls.n	8002d10 <_free_r+0x44>
 8002cfc:	6821      	ldr	r1, [r4, #0]
 8002cfe:	1860      	adds	r0, r4, r1
 8002d00:	4283      	cmp	r3, r0
 8002d02:	d1f3      	bne.n	8002cec <_free_r+0x20>
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	1841      	adds	r1, r0, r1
 8002d0a:	6021      	str	r1, [r4, #0]
 8002d0c:	e7ee      	b.n	8002cec <_free_r+0x20>
 8002d0e:	0013      	movs	r3, r2
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	d001      	beq.n	8002d1a <_free_r+0x4e>
 8002d16:	42a2      	cmp	r2, r4
 8002d18:	d9f9      	bls.n	8002d0e <_free_r+0x42>
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	1858      	adds	r0, r3, r1
 8002d1e:	42a0      	cmp	r0, r4
 8002d20:	d10b      	bne.n	8002d3a <_free_r+0x6e>
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	1809      	adds	r1, r1, r0
 8002d26:	1858      	adds	r0, r3, r1
 8002d28:	6019      	str	r1, [r3, #0]
 8002d2a:	4282      	cmp	r2, r0
 8002d2c:	d1e0      	bne.n	8002cf0 <_free_r+0x24>
 8002d2e:	6810      	ldr	r0, [r2, #0]
 8002d30:	6852      	ldr	r2, [r2, #4]
 8002d32:	1841      	adds	r1, r0, r1
 8002d34:	6019      	str	r1, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	e7da      	b.n	8002cf0 <_free_r+0x24>
 8002d3a:	42a0      	cmp	r0, r4
 8002d3c:	d902      	bls.n	8002d44 <_free_r+0x78>
 8002d3e:	230c      	movs	r3, #12
 8002d40:	602b      	str	r3, [r5, #0]
 8002d42:	e7d5      	b.n	8002cf0 <_free_r+0x24>
 8002d44:	6821      	ldr	r1, [r4, #0]
 8002d46:	1860      	adds	r0, r4, r1
 8002d48:	4282      	cmp	r2, r0
 8002d4a:	d103      	bne.n	8002d54 <_free_r+0x88>
 8002d4c:	6810      	ldr	r0, [r2, #0]
 8002d4e:	6852      	ldr	r2, [r2, #4]
 8002d50:	1841      	adds	r1, r0, r1
 8002d52:	6021      	str	r1, [r4, #0]
 8002d54:	6062      	str	r2, [r4, #4]
 8002d56:	605c      	str	r4, [r3, #4]
 8002d58:	e7ca      	b.n	8002cf0 <_free_r+0x24>
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	20000090 	.word	0x20000090

08002d60 <_malloc_r>:
 8002d60:	2303      	movs	r3, #3
 8002d62:	b570      	push	{r4, r5, r6, lr}
 8002d64:	1ccd      	adds	r5, r1, #3
 8002d66:	439d      	bics	r5, r3
 8002d68:	3508      	adds	r5, #8
 8002d6a:	0006      	movs	r6, r0
 8002d6c:	2d0c      	cmp	r5, #12
 8002d6e:	d21e      	bcs.n	8002dae <_malloc_r+0x4e>
 8002d70:	250c      	movs	r5, #12
 8002d72:	42a9      	cmp	r1, r5
 8002d74:	d81d      	bhi.n	8002db2 <_malloc_r+0x52>
 8002d76:	0030      	movs	r0, r6
 8002d78:	f000 f888 	bl	8002e8c <__malloc_lock>
 8002d7c:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <_malloc_r+0xb4>)
 8002d7e:	6814      	ldr	r4, [r2, #0]
 8002d80:	0021      	movs	r1, r4
 8002d82:	2900      	cmp	r1, #0
 8002d84:	d119      	bne.n	8002dba <_malloc_r+0x5a>
 8002d86:	4c24      	ldr	r4, [pc, #144]	; (8002e18 <_malloc_r+0xb8>)
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <_malloc_r+0x36>
 8002d8e:	0030      	movs	r0, r6
 8002d90:	f000 f844 	bl	8002e1c <_sbrk_r>
 8002d94:	6020      	str	r0, [r4, #0]
 8002d96:	0029      	movs	r1, r5
 8002d98:	0030      	movs	r0, r6
 8002d9a:	f000 f83f 	bl	8002e1c <_sbrk_r>
 8002d9e:	1c43      	adds	r3, r0, #1
 8002da0:	d12b      	bne.n	8002dfa <_malloc_r+0x9a>
 8002da2:	230c      	movs	r3, #12
 8002da4:	0030      	movs	r0, r6
 8002da6:	6033      	str	r3, [r6, #0]
 8002da8:	f000 f871 	bl	8002e8e <__malloc_unlock>
 8002dac:	e003      	b.n	8002db6 <_malloc_r+0x56>
 8002dae:	2d00      	cmp	r5, #0
 8002db0:	dadf      	bge.n	8002d72 <_malloc_r+0x12>
 8002db2:	230c      	movs	r3, #12
 8002db4:	6033      	str	r3, [r6, #0]
 8002db6:	2000      	movs	r0, #0
 8002db8:	bd70      	pop	{r4, r5, r6, pc}
 8002dba:	680b      	ldr	r3, [r1, #0]
 8002dbc:	1b5b      	subs	r3, r3, r5
 8002dbe:	d419      	bmi.n	8002df4 <_malloc_r+0x94>
 8002dc0:	2b0b      	cmp	r3, #11
 8002dc2:	d903      	bls.n	8002dcc <_malloc_r+0x6c>
 8002dc4:	600b      	str	r3, [r1, #0]
 8002dc6:	18cc      	adds	r4, r1, r3
 8002dc8:	6025      	str	r5, [r4, #0]
 8002dca:	e003      	b.n	8002dd4 <_malloc_r+0x74>
 8002dcc:	684b      	ldr	r3, [r1, #4]
 8002dce:	428c      	cmp	r4, r1
 8002dd0:	d10d      	bne.n	8002dee <_malloc_r+0x8e>
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	0030      	movs	r0, r6
 8002dd6:	f000 f85a 	bl	8002e8e <__malloc_unlock>
 8002dda:	0020      	movs	r0, r4
 8002ddc:	2207      	movs	r2, #7
 8002dde:	300b      	adds	r0, #11
 8002de0:	1d23      	adds	r3, r4, #4
 8002de2:	4390      	bics	r0, r2
 8002de4:	1ac3      	subs	r3, r0, r3
 8002de6:	d0e7      	beq.n	8002db8 <_malloc_r+0x58>
 8002de8:	425a      	negs	r2, r3
 8002dea:	50e2      	str	r2, [r4, r3]
 8002dec:	e7e4      	b.n	8002db8 <_malloc_r+0x58>
 8002dee:	6063      	str	r3, [r4, #4]
 8002df0:	000c      	movs	r4, r1
 8002df2:	e7ef      	b.n	8002dd4 <_malloc_r+0x74>
 8002df4:	000c      	movs	r4, r1
 8002df6:	6849      	ldr	r1, [r1, #4]
 8002df8:	e7c3      	b.n	8002d82 <_malloc_r+0x22>
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	1cc4      	adds	r4, r0, #3
 8002dfe:	439c      	bics	r4, r3
 8002e00:	42a0      	cmp	r0, r4
 8002e02:	d0e1      	beq.n	8002dc8 <_malloc_r+0x68>
 8002e04:	1a21      	subs	r1, r4, r0
 8002e06:	0030      	movs	r0, r6
 8002e08:	f000 f808 	bl	8002e1c <_sbrk_r>
 8002e0c:	1c43      	adds	r3, r0, #1
 8002e0e:	d1db      	bne.n	8002dc8 <_malloc_r+0x68>
 8002e10:	e7c7      	b.n	8002da2 <_malloc_r+0x42>
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	20000090 	.word	0x20000090
 8002e18:	20000094 	.word	0x20000094

08002e1c <_sbrk_r>:
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	b570      	push	{r4, r5, r6, lr}
 8002e20:	4c06      	ldr	r4, [pc, #24]	; (8002e3c <_sbrk_r+0x20>)
 8002e22:	0005      	movs	r5, r0
 8002e24:	0008      	movs	r0, r1
 8002e26:	6023      	str	r3, [r4, #0]
 8002e28:	f7fd ff5a 	bl	8000ce0 <_sbrk>
 8002e2c:	1c43      	adds	r3, r0, #1
 8002e2e:	d103      	bne.n	8002e38 <_sbrk_r+0x1c>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d000      	beq.n	8002e38 <_sbrk_r+0x1c>
 8002e36:	602b      	str	r3, [r5, #0]
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	20000120 	.word	0x20000120

08002e40 <strdup>:
 8002e40:	b510      	push	{r4, lr}
 8002e42:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <strdup+0x10>)
 8002e44:	0001      	movs	r1, r0
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	f000 f804 	bl	8002e54 <_strdup_r>
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	2000000c 	.word	0x2000000c

08002e54 <_strdup_r>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	0005      	movs	r5, r0
 8002e58:	0008      	movs	r0, r1
 8002e5a:	000e      	movs	r6, r1
 8002e5c:	f7fd f954 	bl	8000108 <strlen>
 8002e60:	1c44      	adds	r4, r0, #1
 8002e62:	0021      	movs	r1, r4
 8002e64:	0028      	movs	r0, r5
 8002e66:	f7ff ff7b 	bl	8002d60 <_malloc_r>
 8002e6a:	1e05      	subs	r5, r0, #0
 8002e6c:	d003      	beq.n	8002e76 <_strdup_r+0x22>
 8002e6e:	0022      	movs	r2, r4
 8002e70:	0031      	movs	r1, r6
 8002e72:	f000 f802 	bl	8002e7a <memcpy>
 8002e76:	0028      	movs	r0, r5
 8002e78:	bd70      	pop	{r4, r5, r6, pc}

08002e7a <memcpy>:
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d100      	bne.n	8002e84 <memcpy+0xa>
 8002e82:	bd10      	pop	{r4, pc}
 8002e84:	5ccc      	ldrb	r4, [r1, r3]
 8002e86:	54c4      	strb	r4, [r0, r3]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	e7f8      	b.n	8002e7e <memcpy+0x4>

08002e8c <__malloc_lock>:
 8002e8c:	4770      	bx	lr

08002e8e <__malloc_unlock>:
 8002e8e:	4770      	bx	lr

08002e90 <_init>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr

08002e9c <_fini>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr
